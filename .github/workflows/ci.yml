name: ci

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.76.0

jobs:
  test:
    runs-on: ubuntu-latest-16-cores
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: |
          cargo llvm-cov nextest --no-report --all-features --workspace --exclude katana --build-jobs 10
          cargo llvm-cov nextest --no-report -p katana
          cargo llvm-cov nextest --no-report -p katana --no-default-features --features sir
          cargo llvm-cov report --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  ensure-wasm:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: cargo build -r --target wasm32-unknown-unknown -p torii-client

  ensure-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_version }}
          target: x86_64-pc-windows-msvc
      - uses: swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.github_token }}
      - run: cargo build --target x86_64-pc-windows-msvc --bins

  # cairofmt:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly-2022-11-03
  #     - uses: Swatinem/rust-cache@v2
  #     - run: cargo install cairo-lang-formatter
  #     - run: scripts/cairo_fmt.sh --check

  dojo-core-test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: cargo run --bin sozo -- --manifest-path crates/dojo-core/Scarb.toml test

  dojo-spawn-and-move-example-test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: cargo run --bin sozo -- --manifest-path examples/spawn-and-move/Scarb.toml test

  dojo-world-bindings-check:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: cargo run --bin dojo-world-abigen -- --check

  clippy:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: scripts/clippy.sh

  fmt:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: scripts/rust_fmt.sh --check

  docs:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/dojo-dev:8d66222
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: >
          scripts/docs.sh

  test-hurl:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - run: |
          curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/3.0.0/hurl_3.0.0_amd64.deb
          sudo apt update && sudo apt install ./hurl_3.0.0_amd64.deb
      - run: |
          cargo build --bin katana
          nohup target/debug/katana --accounts 2 --disable-fee &
      - run: hurl --test examples/rpc/**/*.hurl
