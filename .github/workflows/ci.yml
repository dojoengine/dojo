name: ci

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.70.0

jobs:
  test:
    runs-on: ubuntu-latest-4-cores
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install nextest test runner
        uses: taiki-e/install-action@nextest
      - run: |
          cargo nextest run --all-features

  ensure-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
      - name: "Ensure `torii-client` crate is WASM-able"
        run: |
          cargo build -r --target wasm32-unknown-unknown -p torii-client

  ensure-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: x86_64-pc-windows-msvc
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
      - name: "Ensure buildable on windows"
        run: |
          cargo build --target x86_64-pc-windows-msvc --bins

  # cairofmt:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly-2022-11-03
  #     - uses: Swatinem/rust-cache@v2
  #     - run: cargo install cairo-lang-formatter
  #     - run: scripts/cairo_fmt.sh --check

  dojo-core-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
      - run: cargo run --bin sozo -- --manifest-path crates/dojo-core/Scarb.toml test

  dojo-erc-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
      - run: cargo run --bin sozo -- --manifest-path crates/dojo-erc/Scarb.toml test

  dojo-defi-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
      - run: cargo run --bin sozo -- --manifest-path crates/dojo-defi/Scarb.toml test

  dojo-primitive-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
      - run: cargo run --bin sozo -- --manifest-path crates/dojo-primitives/Scarb.toml test

  dojo-spawn-and-move-example-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v2
      - run: cargo run --bin sozo -- --manifest-path examples/spawn-and-move/Scarb.toml test

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-unknown-unknown
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - run: scripts/clippy.sh

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - run: scripts/rust_fmt.sh --check

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - run: >
          scripts/docs.sh

  test-hurl:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - name: Install Hurl
        run: |
          curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/3.0.0/hurl_3.0.0_amd64.deb
          sudo apt update && sudo apt install ./hurl_3.0.0_amd64.deb
      - name: Build and start Katana node
        run: |
          cargo build --bin katana
          nohup target/debug/katana --accounts 2 --disable-fee &
      - name: Execute Hurl Scripts
        run: hurl --test examples/rpc/**/*.hurl
