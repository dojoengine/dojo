name: preview

on:
  workflow_dispatch:
  push:
    branches:
      - ci-preview

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.80.0
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    env:
      PLATFORM_NAME: ${{ matrix.job.platform }}
      TARGET: ${{ matrix.job.target }}
      ARCH: ${{ matrix.job.arch }}
    strategy:
      matrix:
        job:
          - os: ubuntu-latest-4-cores
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: amd64

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        name: Rust Toolchain Setup
        with:
          targets: ${{ matrix.job.target }}
          toolchain: ${{ env.RUST_VERSION }}

      - uses: Swatinem/rust-cache@v1

      - uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "25.x"

      - name: Build binaries
        run: |
          cargo build -r --bin katana --target ${{ matrix.job.target }}
          cargo build -r --bin torii --target ${{ matrix.job.target }}
          cargo build -r --bin saya --target ${{ matrix.job.target }}

      - name: Archive binaries
        id: artifacts
        env:
          VERSION_NAME: v${{ needs.prepare.outputs.tag_name }}
        run: |
          tar -czvf "dojo_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release katana torii saya
          echo "file_name=dojo_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
        shell: bash

      # We move binaries so they match $TARGETPLATFORM in the Docker build
      - name: Move Binaries
        if: ${{ env.PLATFORM_NAME == 'linux' }}
        run: |
          mkdir -p $PLATFORM_NAME/$ARCH
          mv target/$TARGET/release/katana $PLATFORM_NAME/$ARCH
          mv target/$TARGET/release/torii $PLATFORM_NAME/$ARCH
          mv target/$TARGET/release/saya $PLATFORM_NAME/$ARCH
        shell: bash

      # Upload these for use with the Docker build later
      - name: Upload docker binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ${{ env.PLATFORM_NAME }}
          retention-days: 1

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ steps.artifacts.outputs.file_name }}
          retention-days: 1

  docker-build-and-push:
    runs-on: ubuntu-20.04-4-cores
    needs: [build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: artifacts/linux

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:preview--${{ github.ref_name }}
          platforms: linux/amd64
          build-contexts: |
            artifacts=artifacts

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build-and-push]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy on slot
        run: |
          curl -L https://slot.cartridge.sh | bash
          slotup
          slot --version
          slot d create preview--${{ github.ref_name }} katana --version preview--${{ github.ref_name }}
          slot d create preview--${{ github.ref_name }} torii --version preview--${{ github.ref_name }} \
            --rpc=http://slot.prod.svc.cluster.local/x/starknet/sepolia \
            --world=0x1caef8b56b3f0627479ab624eefff92d7d8e1daa9d418cc76bd74935f1dc283 \
            --start-block=0
        env:
          SLOT_AUTH: ${{ secrets.SLOT_AUTH }}
