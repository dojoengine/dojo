use array::ArrayTrait;
use starknet::{ContractAddress, ClassHash};

#[derive(Model, Drop, Serde)]
struct Record {
    #[key]
    record_id: u32,
    depth: Depth,
    type_u8: u8,
    type_u16: u16,
    type_u32: u32,
    type_u64: u64,
    type_u128: u128,
    type_u256: u256,
    type_bool: bool,
    type_felt: felt252,
    type_class_hash: ClassHash,
    type_contract_address: ContractAddress,
    type_deeply_nested: Nested,
    type_nested_one: NestedMost,
    type_nested_two: NestedMost,
    random_u8: u8,
    random_u128: u128,
    composite_u256: u256,
}

#[derive(Model, Copy, Drop, Serde)]
struct RecordSibling {
    #[key]
    record_id: u32,
    random_u8: u8
}

#[derive(Copy, Drop, Serde, Introspect)]
struct Nested {
    depth: Depth,
    type_number: u8,
    type_string: felt252,
    type_nested_more: NestedMore,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct NestedMore {
    depth: Depth,
    type_number: u8,
    type_string: felt252,
    type_nested_most: NestedMost,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct NestedMost {
    depth: Depth,
    type_number: u8,
    type_string: felt252,
}

#[derive(Model, Copy, Drop, Serde)]
struct Subrecord {
    #[key]
    record_id: u32,
    #[key]
    subrecord_id: u32,
    type_u8: u8,
    random_u8: u8,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum Depth {
    Zero: (),
    One: (),
    Two: (),
    Three: (),
}

impl DepthIntoFelt252 of Into<Depth, felt252> {
    fn into(self: Depth) -> felt252 {
        match self {
            Depth::Zero => 0,
            Depth::One => 1,
            Depth::Two => 2,
            Depth::Three => 3,
        }
    }
}

// takes a long time to deploy, uncomment for now
// #[derive(Model, Copy, Drop, Serde)]
// struct FatModel {
//     #[key]
//     record_id: u32,
//     a0: u256,
//     a1: u256,
//     a2: u256,
//     a3: u256,
//     a4: u256,
//     a5: u256,
//     a6: u256,
//     a7: u256,
//     a8: u256,
//     a9: u256,
//     a10: u256,
//     a11: u256,
//     a12: u256,
//     a13: u256,
//     a14: u256,
//     a15: u256,
//     a16: u256,
//     a17: u256,
//     a18: u256,
//     a19: u256,
//     a20: u256,
//     a21: u256,
//     a22: u256,
//     a23: u256,
//     a24: u256,
//     a25: u256,
//     a26: u256,
//     a27: u256,
//     a28: u256,
//     a29: u256,
//     a30: u256,
//     a31: u256,
//     a32: u256,
//     a33: u256,
//     a34: u256,
//     a35: u256,
//     a36: u256,
//     a37: u256,
//     a38: u256,
//     a39: u256,
//     a40: u256,
//     a41: u256,
//     a42: u256,
//     a43: u256,
//     a44: u256,
//     a45: u256,
//     a46: u256,
//     a47: u256,
//     a48: u256,
//     a49: u256,
//     a50: u256,
//     a51: u256,
//     a52: u256,
//     a53: u256,
//     a54: u256,
//     a55: u256,
//     a56: u256,
//     a57: u256,
//     a58: u256,
//     a59: u256,
//     a60: u256,
//     a61: u256,
//     a62: u256,
//     a63: u256,
//     a64: u256,
//     a65: u256,
//     a66: u256,
//     a67: u256,
//     a68: u256,
//     a69: u256,
//     a70: u256,
//     a71: u256,
//     a72: u256,
//     a73: u256,
//     a74: u256,
//     a75: u256,
//     a76: u256,
//     a77: u256,
//     a78: u256,
//     a79: u256,
//     a80: u256,
//     a81: u256,
//     a82: u256,
//     a83: u256,
//     a84: u256,
//     a85: u256,
//     a86: u256,
//     a87: u256,
//     a88: u256,
//     a89: u256,
//     a90: u256,
//     a91: u256,
//     a92: u256,
//     a93: u256,
//     a94: u256,
//     a95: u256,
//     a96: u256,
//     a97: u256,
//     a98: u256,
//     a99: u256,
//     a100: u256,
//     a101: u256,
//     a102: u256,
//     a103: u256,
//     a104: u256,
//     a105: u256,
//     a106: u256,
//     a107: u256,
//     a108: u256,
//     a109: u256,
//     a110: u256,
//     a111: u256,
//     a112: u256,
//     a113: u256,
//     a114: u256,
//     a115: u256,
//     a116: u256,
//     a117: u256,
//     a118: u256,
//     a119: u256,
//     a120: u256,
//     a121: u256,
//     a122: u256,
//     a123: u256,
//     a124: u256,
//     a125: u256,
//     a126: u256,
//     a127: u256,
//     a128: u256,
//     a129: u256,
//     a130: u256,
//     a131: u256,
//     a132: u256,
//     a133: u256,
//     a134: u256,
//     a135: u256,
//     a136: u256,
//     a137: u256,
//     a138: u256,
//     a139: u256,
//     a140: u256,
//     a141: u256,
//     a142: u256,
//     a143: u256,
//     a144: u256,
//     a145: u256,
//     a146: u256,
//     a147: u256,
//     a148: u256,
//     a149: u256,
//     a150: u256,
//     a151: u256,
//     a152: u256,
//     a153: u256,
//     a154: u256,
//     a155: u256,
//     a156: u256,
//     a157: u256,
//     a158: u256,
//     a159: u256,
//     a160: u256,
//     a161: u256,
//     a162: u256,
//     a163: u256,
//     a164: u256,
//     a165: u256,
//     a166: u256,
//     a167: u256,
//     a168: u256,
//     a169: u256,
//     a170: u256,
//     a171: u256,
//     a172: u256,
//     a173: u256,
//     a174: u256,
//     a175: u256,
//     a176: u256,
//     a177: u256,
//     a178: u256,
//     a179: u256,
//     a180: u256,
//     a181: u256,
//     a182: u256,
//     a183: u256,
//     a184: u256,
//     a185: u256,
//     a186: u256,
//     a187: u256,
//     a188: u256,
//     a189: u256,
//     a190: u256,
//     a191: u256,
//     a192: u256,
//     a193: u256,
//     a194: u256,
//     a195: u256,
//     a196: u256,
//     a197: u256,
//     a198: u256,
//     a199: u256,
//     a200: u256,
//     a201: u256,
//     a202: u256,
//     a203: u256,
//     a204: u256,
//     a205: u256,
//     a206: u256,
//     a207: u256,
//     a208: u256,
//     a209: u256,
//     a210: u256,
//     a211: u256,
//     a212: u256,
//     a213: u256,
//     a214: u256,
//     a215: u256,
//     a216: u256,
//     a217: u256,
//     a218: u256,
//     a219: u256,
//     a220: u256,
//     a221: u256,
//     a222: u256,
//     a223: u256,
//     a224: u256,
//     a225: u256,
//     a226: u256,
//     a227: u256,
//     a228: u256,
//     a229: u256,
//     a230: u256,
//     a231: u256,
//     a232: u256,
//     a233: u256,
//     a234: u256,
//     a235: u256,
//     a236: u256,
//     a237: u256,
//     a238: u256,
//     a239: u256,
//     a240: u256,
//     a241: u256,
//     a242: u256,
//     a243: u256,
//     a244: u256,
//     a245: u256,
//     a246: u256,
//     a247: u256,
//     a248: u256,
//     a249: u256,
//     a250: u256,
//     a251: u256,
//     a252: u256,
//     a253: u256,
//     a254: u256,
//     a255: u256,
// }
