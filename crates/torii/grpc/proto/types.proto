syntax = "proto3";
package types;

import "schema.proto";

message WorldMetadata {
    // The hex-encoded address of the world.
    string world_address = 1;
    // The hex-encoded class hash of the world.
    string world_class_hash = 2;
    // The hex-encoded address of the executor.
    string executor_address = 3;
    // The hex-encoded class hash of the executor.
    string executor_class_hash = 4;
    // A list of metadata for all registered components in the world. 
    repeated ModelMetadata models = 5;
}

message ModelMetadata {
    // Model name
    string name = 1;
    // Model size when it is packed for storage
    uint32 packed_size = 2;
    // Model size when it is unpacked
    uint32 unpacked_size = 3;
    // hex-encoded class hash of the component
    string class_hash = 4;
    // The layout of the component in bytes
    bytes layout = 5;
    // The schema of the component serialized in bytes (for simplicity sake)
    bytes schema = 6;
    // hex-encoded contract address of the component
    string contract_address = 7;
}

message Model {
    string name = 1;
    repeated Member members = 2;
}

message Entity {
    // The entity's hashed keys
    bytes hashed_keys = 1;
    // Models of the entity
    repeated Model models = 2;
}

message Event {
    // The event's keys
    repeated bytes keys = 1;
    // Data of the event
    repeated bytes data = 2;
    // event's transaction hash
    bytes transaction_hash = 3;
}

message StorageEntry {
    // The key of the changed value
    string key = 1;
    // The new value applied to the given address
    string value = 2;
}

message StorageDiff {
    // The contract address for which the storage changed
    string address = 1;
    // The changes in the storage of the contract
    repeated StorageEntry storage_entries = 2;
}

message ModelDiff {
    // Storage diffs
    repeated StorageDiff storage_diffs = 1;
}

message ModelUpdate {
    string block_hash = 1;
    ModelDiff model_diff = 2;
}

message Query {
    Clause clause = 1;
    uint32 limit = 2;
    uint32 offset = 3;
}

message EventQuery {
    EventKeysClause keys =1;
    uint32 limit = 2;
    uint32 offset = 3;
}

message Clause {
    oneof clause_type {
        HashedKeysClause hashed_keys = 1;
        KeysClause keys = 2;
        MemberClause member = 3;
        CompositeClause composite = 4;
    }
}

message HashedKeysClause {
    repeated bytes hashed_keys = 1;
}

message EventKeysClause {
    repeated bytes keys = 1;
}

message KeysClause {
    string model = 1;
    repeated bytes keys = 2;
}

message MemberClause {
    string model = 1;
    string member = 2;
    ComparisonOperator operator = 3;
    Value value = 4;
}

message CompositeClause {
    string model = 1;
    LogicalOperator operator = 2;
    repeated Clause clauses = 3;
}

enum LogicalOperator {
    AND = 0;
    OR = 1;
}

enum ComparisonOperator {
    EQ = 0;
    NEQ = 1;
    GT = 2;
    GTE = 3;
    LT = 4;
    LTE = 5;
}