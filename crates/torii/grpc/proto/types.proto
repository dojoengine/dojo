syntax = "proto3";
package types;

import "schema.proto";

message WorldMetadata {
    // The hex-encoded address of the world.
    string world_address = 1;
    // A list of metadata for all registered components in the world. 
    repeated ModelMetadata models = 5;
}

message ModelMetadata {
    // Model namespace
    string namespace = 1;
    // Model name
    string name = 2;
    // Model size when it is packed for storage
    uint32 packed_size = 3;
    // Model size when it is unpacked
    uint32 unpacked_size = 4;
    // hex-encoded class hash of the component
    string class_hash = 5;
    // The layout of the component in bytes
    bytes layout = 6;
    // The schema of the component serialized in bytes (for simplicity sake)
    bytes schema = 7;
    // hex-encoded contract address of the component
    string contract_address = 8;
}

message Entity {
    // The entity's hashed keys
    bytes hashed_keys = 1;
    // Models of the entity
    repeated Struct models = 2;
}

message Event {
    // The event's keys
    repeated bytes keys = 1;
    // Data of the event
    repeated bytes data = 2;
    // event's transaction hash
    bytes transaction_hash = 3;
}

message StorageEntry {
    // The key of the changed value
    string key = 1;
    // The new value applied to the given address
    string value = 2;
}

message StorageDiff {
    // The contract address for which the storage changed
    string address = 1;
    // The changes in the storage of the contract
    repeated StorageEntry storage_entries = 2;
}

message ModelDiff {
    // Storage diffs
    repeated StorageDiff storage_diffs = 1;
}

message ModelUpdate {
    string block_hash = 1;
    ModelDiff model_diff = 2;
}

message Query {
    Clause clause = 1;
    uint32 limit = 2;
    uint32 offset = 3;
    bool dont_include_hashed_keys = 4;
    repeated OrderBy order_by = 5;
    repeated string entity_models = 6;
	uint64 entity_updated_after = 7;
}

message EventQuery {
    KeysClause keys = 1;
    uint32 limit = 2;
    uint32 offset = 3;
}

message Clause {
    oneof clause_type {
        HashedKeysClause hashed_keys = 1;
        KeysClause keys = 2;
        MemberClause member = 3;
        CompositeClause composite = 4;
    }
}

message ModelKeysClause {
    string model = 2;
    repeated bytes keys = 3;
}

message EntityKeysClause {
    oneof clause_type {
        HashedKeysClause hashed_keys = 1;
        KeysClause keys = 2;
    }
}

message KeysClause {
    repeated bytes keys = 2;
    PatternMatching pattern_matching = 3;
    repeated string models = 4;
}

message HashedKeysClause {
    repeated bytes hashed_keys = 1;
}

message MemberValue {
    oneof value_type {
        Primitive primitive = 1;
        string string = 2;
        MemberValueList list = 3;
    }
}

message MemberValueList {
    repeated MemberValue values = 1;
}

message MemberClause {
    string model = 2;
    string member = 3;
    ComparisonOperator operator = 4;
    MemberValue value = 5;
}

message CompositeClause {
    LogicalOperator operator = 3;
    repeated Clause clauses = 4;
}

enum PatternMatching {
    FixedLen = 0;
    VariableLen = 1;
}

enum LogicalOperator {
    AND = 0;
    OR = 1;
}

enum ComparisonOperator {
    EQ = 0;
    NEQ = 1;
    GT = 2;
    GTE = 3;
    LT = 4;
    LTE = 5;
    IN = 6;
    NOT_IN = 7;
}

message Token {
    bytes token_id = 1;
    bytes contract_address = 2;
    string name = 3;
    string symbol = 4;
    uint32 decimals = 5;
    bytes metadata = 6;
}

message TokenBalance {
    bytes balance = 1;
    bytes account_address = 2;
    bytes contract_address = 3;
    bytes token_id = 4;
}

message OrderBy {
    string model = 1;
    string member = 2;
    OrderDirection direction = 3;
}

enum OrderDirection {
    ASC = 0;
    DESC = 1;
}

message Controller {
    bytes address = 1;
    string username = 2;
    uint64 deployed_at_timestamp = 3;
}