syntax = "proto3";
package world;

import "types.proto";
import "google/protobuf/empty.proto";


// The World service provides information about the world.
service World {
    // Subscribes to updates about the indexer. Like the head block number, tps, etc.
    rpc SubscribeIndexer (SubscribeIndexerRequest) returns (stream SubscribeIndexerResponse);

    // Retrieves metadata about the World including all the registered components and systems.
    rpc WorldMetadata (WorldMetadataRequest) returns (WorldMetadataResponse);
   
    // Subscribes to models updates.
    rpc SubscribeModels (SubscribeModelsRequest) returns (stream SubscribeModelsResponse);

    // Subscribe to entity updates.
    rpc SubscribeEntities (SubscribeEntitiesRequest) returns (stream SubscribeEntityResponse);

    // Update entity subscription
    rpc UpdateEntitiesSubscription (UpdateEntitiesSubscriptionRequest) returns (google.protobuf.Empty);

    // Retrieve entities
    rpc RetrieveEntities (RetrieveEntitiesRequest) returns (RetrieveEntitiesResponse);

    // Retrieve entities as a stream
    rpc RetrieveEntitiesStreaming (RetrieveEntitiesRequest) returns (stream RetrieveEntitiesStreamingResponse);

    // Subscribe to entity updates.
    rpc SubscribeEventMessages (SubscribeEventMessagesRequest) returns (stream SubscribeEntityResponse);

    // Update entity subscription
    rpc UpdateEventMessagesSubscription (UpdateEventMessagesSubscriptionRequest) returns (google.protobuf.Empty);

    // Retrieve entities
    rpc RetrieveEventMessages (RetrieveEventMessagesRequest) returns (RetrieveEntitiesResponse);

    // Retrieve events
    rpc RetrieveEvents (RetrieveEventsRequest) returns (RetrieveEventsResponse);

    // Subscribe to events
    rpc SubscribeEvents (SubscribeEventsRequest) returns (stream SubscribeEventsResponse);
}

// A request to subscribe to indexer updates.
message SubscribeIndexerRequest {
    bytes contract_address = 1;
}

// A response containing indexer updates.
message SubscribeIndexerResponse {
    int64 head = 1;
    int64 tps = 2;
    int64 last_block_timestamp = 3;
    bytes contract_address = 4;
}

// A request to retrieve metadata for a specific world ID.
message WorldMetadataRequest {

}

// The metadata response contains addresses and class hashes for the world.
message WorldMetadataResponse {
   types.WorldMetadata metadata = 1;
}

message SubscribeModelsRequest {
    // The list of model keys to subscribe to.
    repeated types.ModelKeysClause models_keys = 1;
}

message SubscribeModelsResponse {
    // List of models that have been updated.
    types.ModelUpdate model_update = 1;
}

message SubscribeEntitiesRequest {
    repeated types.EntityKeysClause clauses = 1;
}

message SubscribeEventMessagesRequest {
    repeated types.EntityKeysClause clauses = 1;
    bool historical = 2;
}

message UpdateEntitiesSubscriptionRequest {
    uint64 subscription_id = 1;
    repeated types.EntityKeysClause clauses = 2;
}

message UpdateEventMessagesSubscriptionRequest {
    uint64 subscription_id = 1;
    repeated types.EntityKeysClause clauses = 2;
    bool historical = 3;
}

message SubscribeEntityResponse {
    types.Entity entity = 1;
    uint64 subscription_id = 2;
}

message RetrieveEntitiesRequest {
    // The entities to retrieve
    types.Query query = 1;
}

message RetrieveEventMessagesRequest {
    // The event messages to retrieve
    types.Query query = 1;
    // Should we retrieve historical event messages?
    bool historical = 2;
}

message RetrieveEntitiesResponse {
    repeated types.Entity entities = 1;
    uint32 total_count = 2;
}

message RetrieveEntitiesStreamingResponse {
    types.Entity entity = 1;
    uint32 remaining_count = 2;
}

message RetrieveEventsRequest {
    // The events to retrieve
    types.EventQuery query = 1;
}

message RetrieveEventsResponse {
    repeated types.Event events = 1;
}

message SubscribeEventsRequest {
    repeated types.EntityKeysClause keys = 1;
}

message SubscribeEventsResponse {
    types.Event event = 1;
}
