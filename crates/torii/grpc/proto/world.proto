syntax = "proto3";
package world;

import "types.proto";

// The World service provides information about the world.
service World {
    // Retrieves metadata about the World including all the registered components and systems.
    rpc WorldMetadata (MetadataRequest) returns (MetadataResponse);
   
    // Subscribes to models updates.
    rpc SubscribeModels (SubscribeModelsRequest) returns (stream SubscribeModelsResponse);

    // Subscribe to entity updates.
    rpc SubscribeEntities (SubscribeEntitiesRequest) returns (stream SubscribeEntityResponse);

    // Retrieve entities
    rpc RetrieveEntities (RetrieveEntitiesRequest) returns (RetrieveEntitiesResponse);

    // Subscribe to entity updates.
    rpc SubscribeEventMessages (SubscribeEntitiesRequest) returns (stream SubscribeEntityResponse);

    // Retrieve entities
    rpc RetrieveEventMessages (RetrieveEntitiesRequest) returns (RetrieveEntitiesResponse);

    // Retrieve events
    rpc RetrieveEvents (RetrieveEventsRequest) returns (RetrieveEventsResponse);
}


// A request to retrieve metadata for a specific world ID.
message MetadataRequest {

}

// The metadata response contains addresses and class hashes for the world.
message MetadataResponse {
   types.WorldMetadata metadata = 1;
}

message SubscribeModelsRequest {
    // The list of model keys to subscribe to.
    repeated types.KeysClause models_keys = 1;
}

message SubscribeModelsResponse {
    // List of models that have been updated.
    types.ModelUpdate model_update = 1;
}

message SubscribeEntitiesRequest {
    repeated bytes hashed_keys = 1;
}

message SubscribeEventMessagesRequest {
    repeated bytes hashed_keys = 1;
}

message SubscribeEntityResponse {
    types.Entity entity = 1;
}

message RetrieveEntitiesRequest {
    // The entities to retrieve
    types.Query query = 1;
}

message RetrieveEntitiesResponse {
    repeated types.Entity entities = 1;
    uint32 total_count = 2;
}

message RetrieveEventsRequest {
    // The events to retrieve
    types.EventQuery query = 1;
}

message RetrieveEventsResponse {
    repeated types.Event events = 1;
}
