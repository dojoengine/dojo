//! > Test no params

//! > test_runner_name
test_semantics

//! > setup_code
use array::ArrayTrait;
use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};

#[derive(Copy, Drop, Serde, Introspect)]
struct Health {
	#[key]
	id: u32,
	health: u16,
}

//! > function_code
let key: felt252 = 0xb0b;
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()};

//! > expression
get!()

//! > expected
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > semantic_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "get!(world, keys, (models,))"
 --> lib.cairo:12:1
get!()
^****^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:10:22
fn test_func() { let key: felt252 = 0xb0b;
                     ^*^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:11:5
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()}; {
    ^***^

//! > ==========================================================================

//! > Test wrong params

//! > test_runner_name
test_semantics

//! > setup_code
use array::ArrayTrait;
use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};

#[derive(Copy, Drop, Serde, Introspect)]
struct Health {
	#[key]
	id: u32,
	health: u16,
}

//! > function_code
let key: felt252 = 0xb0b;
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()};

//! > expression
get!(world)

//! > expected
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > semantic_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "get!(world, keys, (models,))"
 --> lib.cairo:12:1
get!(world)
^*********^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:10:22
fn test_func() { let key: felt252 = 0xb0b;
                     ^*^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:11:5
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()}; {
    ^***^

//! > ==========================================================================

//! > Test world and keys

//! > no_diagnostics
true

//! > dojo_semantic
get_success

//! > test_runner_name
test_semantics

//! > setup_code
use array::ArrayTrait;
use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};

#[derive(Copy, Drop, Serde, Introspect)]
struct Health {
	#[key]
	id: u32,
	health: u16,
}

//! > function_code
let key: felt252 = 0xb0b;
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()};

//! > expression
get!(world, key, (Health))

//! > expected
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: ?4::get::<core::felt252, core::felt252Drop, core::Felt252Serde>,
                            args: [
                                Value(
                                    Snapshot(
                                        ExprSnapshot {
                                            inner: Var(
                                                LocalVarId(test::world),
                                            ),
                                            ty: @dojo::world::iworld::IWorldDispatcher,
                                        },
                                    ),
                                ),
                                Value(
                                    Var(
                                        LocalVarId(test::key),
                                    ),
                                ),
                            ],
                            coupon_arg: None,
                            ty: test::Health,
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            Var(
                LocalVarId(test::__Health),
            ),
        ),
        ty: test::Health,
    },
)

//! > semantic_diagnostics
error: Trait has no implementation in context: dojo::model::model::ModelStore::<test::Health>.
 --> lib.cairo:12:1
get!(world, key, (Health))
^************************^
