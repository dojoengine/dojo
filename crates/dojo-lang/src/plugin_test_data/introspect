//! > Test expansion of the derive(Introspect).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use core::serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left: (),
    Right: (),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleOnePrimitive {
    Left: (u16,),
    Right: (u16,),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleSeveralPrimitive {
    Left: (u8, u8),
    Right: (u8, u8),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumPrimitive{
    Left: u64,
    Right: u64
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleMix{
    Left: (Vec2, u64, EnumCustom),
    Right: (Vec2, u64, EnumCustom),
}

#[derive(Copy, Drop, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct FeltsArray<T> {
    #[capacity(10)]
    felts: Array<felt252>,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct CapacityInvalidType<T> {
    #[capacity(10)]
    value: Position,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct FeltsArrayBadCapacity<T> {
    #[capacity(0)]
    felts: Array<felt252>,
}

//! > expanded_cairo_code
use core::serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left: (),
    Right: (),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleOnePrimitive {
    Left: (u16,),
    Right: (u16,),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleSeveralPrimitive {
    Left: (u8, u8),
    Right: (u8, u8),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumPrimitive{
    Left: u64,
    Right: u64
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleMix{
    Left: (Vec2, u64, EnumCustom),
    Right: (Vec2, u64, EnumCustom),
}

#[derive(Copy, Drop, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct FeltsArray<T> {
    #[capacity(10)]
    felts: Array<felt252>,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct CapacityInvalidType<T> {
    #[capacity(10)]
    value: Position,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct FeltsArrayBadCapacity<T> {
    #[capacity(0)]
    felts: Array<felt252>,
}
impl Vec2Copy of core::traits::Copy::<Vec2>;
impl Vec2Drop of core::traits::Drop::<Vec2>;
impl Vec2Serde of core::serde::Serde::<Vec2> {
    fn serialize(self: @Vec2, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.x, ref output);
        core::serde::Serde::serialize(self.y, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<Vec2> {
        core::option::Option::Some(Vec2 {
            x: core::serde::Serde::deserialize(ref serialized)?,
            y: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl Vec2Introspect<> of dojo::database::introspect::Introspect<Vec2<>> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(32);
layout.append(32);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'Vec2',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'x',
                ty: dojo::database::introspect::Ty::Primitive('u32'),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'y',
                ty: dojo::database::introspect::Ty::Primitive('u32'),
                attrs: array![].span()
            })].span()
        })
    }
}
impl PlainEnumSerde of core::serde::Serde::<PlainEnum> {
    fn serialize(self: @PlainEnum, ref output: core::array::Array<felt252>) {
        match self {
            PlainEnum::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            PlainEnum::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<PlainEnum> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => PlainEnum::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => PlainEnum::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl PlainEnumCopy of core::traits::Copy::<PlainEnum>;
impl PlainEnumDrop of core::traits::Drop::<PlainEnum>;

impl PlainEnumIntrospect<> of dojo::database::introspect::Introspect<PlainEnum<>> {
    #[inline(always)]
    fn size() -> usize {
        1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'PlainEnum',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![].span()))
                )].span()
            }
        )
    }
}
impl EnumTupleOnePrimitiveSerde of core::serde::Serde::<EnumTupleOnePrimitive> {
    fn serialize(self: @EnumTupleOnePrimitive, ref output: core::array::Array<felt252>) {
        match self {
            EnumTupleOnePrimitive::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumTupleOnePrimitive::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumTupleOnePrimitive> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumTupleOnePrimitive::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumTupleOnePrimitive::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumTupleOnePrimitiveCopy of core::traits::Copy::<EnumTupleOnePrimitive>;
impl EnumTupleOnePrimitiveDrop of core::traits::Drop::<EnumTupleOnePrimitive>;

impl EnumTupleOnePrimitiveIntrospect<> of dojo::database::introspect::Introspect<EnumTupleOnePrimitive<>> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
layout.append(16);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumTupleOnePrimitive',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u16')
            )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u16')
            )].span()))
                )].span()
            }
        )
    }
}
impl EnumTupleSeveralPrimitiveSerde of core::serde::Serde::<EnumTupleSeveralPrimitive> {
    fn serialize(self: @EnumTupleSeveralPrimitive, ref output: core::array::Array<felt252>) {
        match self {
            EnumTupleSeveralPrimitive::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumTupleSeveralPrimitive::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumTupleSeveralPrimitive> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumTupleSeveralPrimitive::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumTupleSeveralPrimitive::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumTupleSeveralPrimitiveCopy of core::traits::Copy::<EnumTupleSeveralPrimitive>;
impl EnumTupleSeveralPrimitiveDrop of core::traits::Drop::<EnumTupleSeveralPrimitive>;

impl EnumTupleSeveralPrimitiveIntrospect<> of dojo::database::introspect::Introspect<EnumTupleSeveralPrimitive<>> {
    #[inline(always)]
    fn size() -> usize {
        3
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
layout.append(8);
layout.append(8);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumTupleSeveralPrimitive',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u8')
            ), dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u8')
            )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u8')
            ), dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u8')
            )].span()))
                )].span()
            }
        )
    }
}
impl EnumCustomSerde of core::serde::Serde::<EnumCustom> {
    fn serialize(self: @EnumCustom, ref output: core::array::Array<felt252>) {
        match self {
            EnumCustom::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumCustom::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumCustom> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumCustom::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumCustom::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumCustomCopy of core::traits::Copy::<EnumCustom>;
impl EnumCustomDrop of core::traits::Drop::<EnumCustom>;

impl EnumCustomIntrospect<> of dojo::database::introspect::Introspect<EnumCustom<>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<Vec2>::size() + 1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
dojo::database::introspect::Introspect::<Vec2>::layout(ref layout);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumCustom',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Introspect::<Vec2>::ty()
            )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Introspect::<Vec2>::ty()
            )].span()))
                )].span()
            }
        )
    }
}
impl EnumPrimitiveSerde of core::serde::Serde::<EnumPrimitive> {
    fn serialize(self: @EnumPrimitive, ref output: core::array::Array<felt252>) {
        match self {
            EnumPrimitive::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumPrimitive::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumPrimitive> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumPrimitive::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumPrimitive::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumPrimitiveCopy of core::traits::Copy::<EnumPrimitive>;
impl EnumPrimitiveDrop of core::traits::Drop::<EnumPrimitive>;

impl EnumPrimitiveIntrospect<> of dojo::database::introspect::Introspect<EnumPrimitive<>> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
layout.append(64);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumPrimitive',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u64')
            )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u64')
            )].span()))
                )].span()
            }
        )
    }
}
impl EnumTupleMixSerde of core::serde::Serde::<EnumTupleMix> {
    fn serialize(self: @EnumTupleMix, ref output: core::array::Array<felt252>) {
        match self {
            EnumTupleMix::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumTupleMix::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumTupleMix> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumTupleMix::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumTupleMix::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumTupleMixCopy of core::traits::Copy::<EnumTupleMix>;
impl EnumTupleMixDrop of core::traits::Drop::<EnumTupleMix>;

impl EnumTupleMixIntrospect<> of dojo::database::introspect::Introspect<EnumTupleMix<>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<Vec2>::size() + dojo::database::introspect::Introspect::<EnumCustom>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
dojo::database::introspect::Introspect::<Vec2>::layout(ref layout);
layout.append(64);
dojo::database::introspect::Introspect::<EnumCustom>::layout(ref layout);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumTupleMix',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Introspect::<Vec2>::ty()
            ), dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u64')
            ), dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Introspect::<EnumCustom>::ty()
            )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Introspect::<Vec2>::ty()
            ), dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Ty::Primitive('u64')
            ), dojo::database::introspect::serialize_member_type(
                @dojo::database::introspect::Introspect::<EnumCustom>::ty()
            )].span()))
                )].span()
            }
        )
    }
}
impl PositionCopy of core::traits::Copy::<Position>;
impl PositionDrop of core::traits::Drop::<Position>;

impl PositionIntrospect<> of dojo::database::introspect::Introspect<Position<>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<Vec2>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
dojo::database::introspect::Introspect::<Vec2>::layout(ref layout);
layout.append(16);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'Position',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'player',
                ty: dojo::database::introspect::Ty::Primitive('ContractAddress'),
                attrs: array!['key'].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'before',
                ty: dojo::database::introspect::Ty::Primitive('u8'),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'vec',
                ty: dojo::database::introspect::Introspect::<Vec2>::ty(),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'after',
                ty: dojo::database::introspect::Ty::Primitive('u16'),
                attrs: array![].span()
            })].span()
        })
    }
}
impl GenericStructCopy<T, +core::traits::Copy<T>> of core::traits::Copy::<GenericStruct<T>>;
impl GenericStructDrop<T, +core::traits::Drop<T>> of core::traits::Drop::<GenericStruct<T>>;
impl GenericStructSerde<T, +core::serde::Serde<T>, +core::traits::Destruct<T>> of core::serde::Serde::<GenericStruct<T>> {
    fn serialize(self: @GenericStruct<T>, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.t, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<GenericStruct<T>> {
        core::option::Option::Some(GenericStruct {
            t: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl GenericStructIntrospect<T, impl TIntrospect: dojo::database::introspect::Introspect<T>> of dojo::database::introspect::Introspect<GenericStruct<T>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<T>::size() + 0
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::database::introspect::Introspect::<T>::layout(ref layout);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'GenericStruct',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 't',
                ty: dojo::database::introspect::Introspect::<T>::ty(),
                attrs: array![].span()
            })].span()
        })
    }
}
impl FeltsArrayCopy<T, +core::traits::Copy<T>> of core::traits::Copy::<FeltsArray<T>>;
impl FeltsArrayDrop<T, +core::traits::Drop<T>> of core::traits::Drop::<FeltsArray<T>>;
impl FeltsArraySerde<T, +core::serde::Serde<T>, +core::traits::Destruct<T>> of core::serde::Serde::<FeltsArray<T>> {
    fn serialize(self: @FeltsArray<T>, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.felts, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<FeltsArray<T>> {
        core::option::Option::Some(FeltsArray {
            felts: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl FeltsArrayIntrospect<T, impl TIntrospect: dojo::database::introspect::Introspect<T>> of dojo::database::introspect::Introspect<FeltsArray<T>> {
    #[inline(always)]
    fn size() -> usize {
        1 + 10 + 0
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'FeltsArray',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'felts',
                ty: dojo::database::introspect::Ty::Array(10),
                attrs: array![].span()
            })].span()
        })
    }
}
impl CapacityInvalidTypeCopy<T, +core::traits::Copy<T>> of core::traits::Copy::<CapacityInvalidType<T>>;
impl CapacityInvalidTypeDrop<T, +core::traits::Drop<T>> of core::traits::Drop::<CapacityInvalidType<T>>;
impl CapacityInvalidTypeSerde<T, +core::serde::Serde<T>, +core::traits::Destruct<T>> of core::serde::Serde::<CapacityInvalidType<T>> {
    fn serialize(self: @CapacityInvalidType<T>, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.value, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<CapacityInvalidType<T>> {
        core::option::Option::Some(CapacityInvalidType {
            value: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl CapacityInvalidTypeIntrospect<T, impl TIntrospect: dojo::database::introspect::Introspect<T>> of dojo::database::introspect::Introspect<CapacityInvalidType<T>> {
    #[inline(always)]
    fn size() -> usize {
        1 + 10 + 0
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);
layout.append(251);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'CapacityInvalidType',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'value',
                ty: dojo::database::introspect::Ty::Array(10),
                attrs: array![].span()
            })].span()
        })
    }
}
impl FeltsArrayBadCapacityCopy<T, +core::traits::Copy<T>> of core::traits::Copy::<FeltsArrayBadCapacity<T>>;
impl FeltsArrayBadCapacityDrop<T, +core::traits::Drop<T>> of core::traits::Drop::<FeltsArrayBadCapacity<T>>;
impl FeltsArrayBadCapacitySerde<T, +core::serde::Serde<T>, +core::traits::Destruct<T>> of core::serde::Serde::<FeltsArrayBadCapacity<T>> {
    fn serialize(self: @FeltsArrayBadCapacity<T>, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.felts, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<FeltsArrayBadCapacity<T>> {
        core::option::Option::Some(FeltsArrayBadCapacity {
            felts: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl FeltsArrayBadCapacityIntrospect<T, impl TIntrospect: dojo::database::introspect::Introspect<T>> of dojo::database::introspect::Introspect<FeltsArrayBadCapacity<T>> {
    #[inline(always)]
    fn size() -> usize {
        1 + 0 + 0
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(251);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'FeltsArrayBadCapacity',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'felts',
                ty: dojo::database::introspect::Ty::Array(0),
                attrs: array![].span()
            })].span()
        })
    }
}

//! > expected_diagnostics
error: Unsupported attribute.
 --> test_src/lib.cairo:61:5
    #[capacity(10)]
    ^*************^

error: Capacity is only supported for Array<felt252> or Span<felt252>.
 --> test_src/lib.cairo:67:5
    #[capacity(10)]
    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo:67:5
    #[capacity(10)]
    ^*************^

error: Capacity must be greater than 0.
 --> test_src/lib.cairo:73:5
    #[capacity(0)]
    ^************^

error: Unsupported attribute.
 --> test_src/lib.cairo:73:5
    #[capacity(0)]
    ^************^
