//! > Test expansion of the derive(Introspect).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left: (),
    Right: (),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumPrimitive {
    Left: (u16,),
    Right: (u16,),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTuple {
    Left: (u8, u8),
    Right: (u8, u8),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Copy, Drop, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}

//! > expanded_cairo_code
use serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left: (),
    Right: (),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumPrimitive {
    Left: (u16,),
    Right: (u16,),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTuple {
    Left: (u8, u8),
    Right: (u8, u8),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Copy, Drop, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}
impl Vec2Copy of Copy::<Vec2>;
impl Vec2Drop of Drop::<Vec2>;
impl Vec2Serde of Serde::<Vec2> {
    fn serialize(self: @Vec2, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.x, ref output);
        serde::Serde::serialize(self.y, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<Vec2> {
        Option::Some(Vec2 {
            x: serde::Serde::deserialize(ref serialized)?,
            y: serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl Vec2Introspect<> of dojo::database::introspect::Introspect<Vec2<>> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(32);
layout.append(32);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'Vec2',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'x',
                ty: dojo::database::introspect::Ty::Primitive('u32'),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'y',
                ty: dojo::database::introspect::Ty::Primitive('u32'),
                attrs: array![].span()
            })].span()
        })
    }
}
impl PlainEnumSerde of Serde::<PlainEnum> {
    fn serialize(self: @PlainEnum, ref output: array::Array<felt252>) {
        match self {
            PlainEnum::Left(x) => { serde::Serde::serialize(@0, ref output); serde::Serde::serialize(x, ref output); },
            PlainEnum::Right(x) => { serde::Serde::serialize(@1, ref output); serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<PlainEnum> {
        let idx: felt252 = serde::Serde::deserialize(ref serialized)?;
        Option::Some(
            if idx == 0 { PlainEnum::Left(serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { PlainEnum::Right(serde::Serde::deserialize(ref serialized)?) }
            else { return Option::None; }
        )
    }
}
impl PlainEnumCopy of Copy::<PlainEnum>;
impl PlainEnumDrop of Drop::<PlainEnum>;

impl PlainEnumIntrospect<> of dojo::database::introspect::Introspect<PlainEnum<>> {
    #[inline(always)]
    fn size() -> usize {
        1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'PlainEnum',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![].span()))
                )].span()
            }
        )
    }
}
impl EnumPrimitiveSerde of Serde::<EnumPrimitive> {
    fn serialize(self: @EnumPrimitive, ref output: array::Array<felt252>) {
        match self {
            EnumPrimitive::Left(x) => { serde::Serde::serialize(@0, ref output); serde::Serde::serialize(x, ref output); },
            EnumPrimitive::Right(x) => { serde::Serde::serialize(@1, ref output); serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<EnumPrimitive> {
        let idx: felt252 = serde::Serde::deserialize(ref serialized)?;
        Option::Some(
            if idx == 0 { EnumPrimitive::Left(serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { EnumPrimitive::Right(serde::Serde::deserialize(ref serialized)?) }
            else { return Option::None; }
        )
    }
}
impl EnumPrimitiveCopy of Copy::<EnumPrimitive>;
impl EnumPrimitiveDrop of Drop::<EnumPrimitive>;

impl EnumPrimitiveIntrospect<> of dojo::database::introspect::Introspect<EnumPrimitive<>> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
layout.append(16);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumPrimitive',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u16')
                        )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u16')
                        )].span()))
                )].span()
            }
        )
    }
}
impl EnumTupleSerde of Serde::<EnumTuple> {
    fn serialize(self: @EnumTuple, ref output: array::Array<felt252>) {
        match self {
            EnumTuple::Left(x) => { serde::Serde::serialize(@0, ref output); serde::Serde::serialize(x, ref output); },
            EnumTuple::Right(x) => { serde::Serde::serialize(@1, ref output); serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<EnumTuple> {
        let idx: felt252 = serde::Serde::deserialize(ref serialized)?;
        Option::Some(
            if idx == 0 { EnumTuple::Left(serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { EnumTuple::Right(serde::Serde::deserialize(ref serialized)?) }
            else { return Option::None; }
        )
    }
}
impl EnumTupleCopy of Copy::<EnumTuple>;
impl EnumTupleDrop of Drop::<EnumTuple>;

impl EnumTupleIntrospect<> of dojo::database::introspect::Introspect<EnumTuple<>> {
    #[inline(always)]
    fn size() -> usize {
        3
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
layout.append(8);
layout.append(8);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumTuple',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        ), dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        ), dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        )].span()))
                )].span()
            }
        )
    }
}
impl EnumCustomSerde of Serde::<EnumCustom> {
    fn serialize(self: @EnumCustom, ref output: array::Array<felt252>) {
        match self {
            EnumCustom::Left(x) => { serde::Serde::serialize(@0, ref output); serde::Serde::serialize(x, ref output); },
            EnumCustom::Right(x) => { serde::Serde::serialize(@1, ref output); serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<EnumCustom> {
        let idx: felt252 = serde::Serde::deserialize(ref serialized)?;
        Option::Some(
            if idx == 0 { EnumCustom::Left(serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { EnumCustom::Right(serde::Serde::deserialize(ref serialized)?) }
            else { return Option::None; }
        )
    }
}
impl EnumCustomCopy of Copy::<EnumCustom>;
impl EnumCustomDrop of Drop::<EnumCustom>;

impl EnumCustomIntrospect<> of dojo::database::introspect::Introspect<EnumCustom<>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<Vec2>::size() + 1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
dojo::database::introspect::Introspect::<Vec2>::layout(ref layout);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumCustom',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                        @dojo::database::introspect::Introspect::<Vec2>::ty()
                    )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                        @dojo::database::introspect::Introspect::<Vec2>::ty()
                    )].span()))
                )].span()
            }
        )
    }
}
impl PositionCopy of Copy::<Position>;
impl PositionDrop of Drop::<Position>;

impl PositionIntrospect<> of dojo::database::introspect::Introspect<Position<>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<Vec2>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
dojo::database::introspect::Introspect::<Vec2>::layout(ref layout);
layout.append(16);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'Position',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'player',
                ty: dojo::database::introspect::Ty::Primitive('ContractAddress'),
                attrs: array!['key'].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'before',
                ty: dojo::database::introspect::Ty::Primitive('u8'),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'vec',
                ty: dojo::database::introspect::Introspect::<Vec2>::ty(),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'after',
                ty: dojo::database::introspect::Ty::Primitive('u16'),
                attrs: array![].span()
            })].span()
        })
    }
}
impl GenericStructCopy<T, impl TCopy: Copy<T>> of Copy::<GenericStruct<T>>;
impl GenericStructDrop<T, impl TDrop: Drop<T>> of Drop::<GenericStruct<T>>;
impl GenericStructSerde<T, impl TSerde: Serde<T>, impl TDestruct: Destruct<T>> of Serde::<GenericStruct<T>> {
    fn serialize(self: @GenericStruct<T>, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.t, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<GenericStruct<T>> {
        Option::Some(GenericStruct {
            t: serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl GenericStructIntrospect<T, impl TIntrospect: dojo::database::introspect::Introspect<T>> of dojo::database::introspect::Introspect<GenericStruct<T>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<T>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::database::introspect::Introspect::<T>::layout(ref layout);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'GenericStruct',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 't',
                ty: dojo::database::introspect::Introspect::<T>::ty(),
                attrs: array![].span()
            })].span()
        })
    }
}

//! > expected_diagnostics
