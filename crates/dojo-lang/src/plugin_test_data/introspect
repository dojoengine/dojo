//! > Test expansion of the derive(Introspect).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use serde::Serde;

#[derive(Copy, Drop, Serde, Print, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Model, Copy, Drop, Print, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}

//! > generated_cairo_code
use serde::Serde;


#[derive(Copy, Drop, Serde, Print, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[cfg(test)]
impl Vec2PrintImpl of debug::PrintTrait<Vec2> {
    fn print(self: Vec2) {
        debug::PrintTrait::print('x');
        debug::PrintTrait::print(self.x);
        debug::PrintTrait::print('y');
        debug::PrintTrait::print(self.y);
    }
}
impl Vec2SchemaIntrospection of dojo::database::schema::SchemaIntrospection<Vec2> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(32);
        layout.append(32);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Vec2',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'x',
                            ty: dojo::database::schema::Ty::Primitive('u32'),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'y',
                            ty: dojo::database::schema::Ty::Primitive('u32'),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}



#[derive(Model, Copy, Drop, Print, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}
impl PositionModel of dojo::model::Model<Position> {
    #[inline(always)]
    fn name(self: @Position) -> felt252 {
        'Position'
    }

    #[inline(always)]
    fn keys(self: @Position) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        serde::Serde::serialize(self.player, ref serialized);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn values(self: @Position) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        serde::Serde::serialize(self.before, ref serialized);
        serde::Serde::serialize(self.vec, ref serialized);
        serde::Serde::serialize(self.after, ref serialized);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn layout(self: @Position) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn packed_size(self: @Position) -> usize {
        let mut layout = self.layout();
        dojo::packing::calculate_packed_size(ref layout)
    }
}


impl PositionSchemaIntrospection of dojo::database::schema::SchemaIntrospection<Position> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<Vec2>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
        dojo::database::schema::SchemaIntrospection::<Vec2>::layout(ref layout);
        layout.append(16);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Position',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'player',
                            ty: dojo::database::schema::Ty::Primitive('ContractAddress'),
                            attrs: array!['key'].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'before',
                            ty: dojo::database::schema::Ty::Primitive('u8'),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'vec',
                            ty: dojo::database::schema::SchemaIntrospection::<Vec2>::ty(),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'after',
                            ty: dojo::database::schema::Ty::Primitive('u16'),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}


#[starknet::interface]
trait IPosition<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod position {
    use super::Position;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Position'
    }

    #[external(v0)]
    fn unpacked_size(self: @ContractState) -> usize {
        dojo::database::schema::SchemaIntrospection::<Position>::size()
    }

    #[external(v0)]
    fn packed_size(self: @ContractState) -> usize {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        let mut layout_span = layout.span();
        dojo::packing::calculate_packed_size(ref layout_span)
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> dojo::database::schema::Ty {
        dojo::database::schema::SchemaIntrospection::<Position>::ty()
    }
}
#[cfg(test)]
impl PositionPrintImpl of debug::PrintTrait<Position> {
    fn print(self: Position) {
        debug::PrintTrait::print('player');
        debug::PrintTrait::print(self.player);
        debug::PrintTrait::print('before');
        debug::PrintTrait::print(self.before);
        debug::PrintTrait::print('vec');
        debug::PrintTrait::print(self.vec);
        debug::PrintTrait::print('after');
        debug::PrintTrait::print(self.after);
    }
}
impl PositionSchemaIntrospection of dojo::database::schema::SchemaIntrospection<Position> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<Vec2>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
        dojo::database::schema::SchemaIntrospection::<Vec2>::layout(ref layout);
        layout.append(16);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Position',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'player',
                            ty: dojo::database::schema::Ty::Primitive('ContractAddress'),
                            attrs: array!['key'].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'before',
                            ty: dojo::database::schema::Ty::Primitive('u8'),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'vec',
                            ty: dojo::database::schema::SchemaIntrospection::<Vec2>::ty(),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'after',
                            ty: dojo::database::schema::Ty::Primitive('u16'),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}

//! > expected_diagnostics
