//! > Test expansion of the derive(Introspect).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use core::serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left,
    Right,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithPrimitive {
    Left: u32,
    Right: u32,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithStruct {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithSimpleArray {
    Left: Array<u32>,
    Right: Array<u32>,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithByteArray {
    Left: ByteArray,
    Right: ByteArray,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithSimpleTuple {
    Left: (u8, u256),
    Right: (u8, u256),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithComplexTuple {
    Left: (u8, Vec2),
    Right: (u8, Vec2),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithPrimitive {
    Left: u32,
    Right: u32,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleMix {
    Left: (Vec2, u64, EnumCustom),
    Right: (Vec2, u64, EnumCustom),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithDifferentVariantData {
    One,
    Two: u32,
    Three: (Vec2, u64),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithPrimitives {
    #[key]
    player: ContractAddress,
    before: u8,
    after: u16,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithStruct {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Vec2,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithSimpleArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<u32>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithByteArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ByteArray,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithComplexArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<Vec2>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithSimpleTuple {
    #[key]
    player: ContractAddress,
    before: u8,
    after: (u8, u256),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithComplexTuple {
    #[key]
    player: ContractAddress,
    before: u8,
    after: (u8, Vec2, EnumCustom),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedArrays {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<Array<Array<Vec2>>>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedTuples {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, EnumCustom)),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedTuplesAndByteArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, ByteArray)),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedEverything {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, EnumCustom), (Array<(u32, Vec2)>, EnumCustom), (u16,))
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct StructWithBadOption {
    x: Option<(u8, u16)>
}

#[derive(Copy, Drop, Serde, Introspect)]
enum EnumWithBadOption {
    first: Option<(u8, u16)>,
}

#[derive(Introspect, IntrospectPacked)]
enum EnumIncompatibleAttrs {}

#[derive(Introspect, IntrospectPacked)]
struct StructIncompatibleAttrs {}

#[derive(Introspect)]
#[derive(IntrospectPacked)]
struct StructIncompatibleAttrs2 {}

#[derive(Introspect)]
#[derive(IntrospectPacked)]
enum EnumIncompatibleAttrs2 {}

#[derive(IntrospectPacked)]
struct StructPacked1 {
    x: u8
}

#[derive(IntrospectPacked)]
struct StructPacked2 {
    x: u8,
    y: u256
}

#[derive(IntrospectPacked)]
struct StructPacked3 {
    x: u256,
    y: (u8, u32)
}

#[derive(IntrospectPacked)]
struct StructNotPackable1 {
    x: u8,
    y: Array<u32>
}

#[derive(IntrospectPacked)]
struct StructPackableWithInnerPacked {
    x: u8,
    y: StructPacked1
}

#[derive(IntrospectPacked)]
enum EnumPacked1 {
    a,
    b,
    c
}

#[derive(IntrospectPacked)]
enum EnumPacked2 {
    a: u8,
    b: u8,
    c: u8
}

#[derive(IntrospectPacked)]
enum EnumPacked3 {
    a: (u128, u128),
    b: u256,
}


#[derive(IntrospectPacked)]
enum EnumPackableWithInnerPacked {
    a: StructPacked1,
    b: StructPacked1,
}

#[derive(IntrospectPacked)]
enum EnumNotPackable1 {
    a: u8,
    b: u256,
}

//! > expanded_cairo_code
use core::serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left,
    Right,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithPrimitive {
    Left: u32,
    Right: u32,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithStruct {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithSimpleArray {
    Left: Array<u32>,
    Right: Array<u32>,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithByteArray {
    Left: ByteArray,
    Right: ByteArray,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithSimpleTuple {
    Left: (u8, u256),
    Right: (u8, u256),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithComplexTuple {
    Left: (u8, Vec2),
    Right: (u8, Vec2),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithPrimitive {
    Left: u32,
    Right: u32,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleMix {
    Left: (Vec2, u64, EnumCustom),
    Right: (Vec2, u64, EnumCustom),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithDifferentVariantData {
    One,
    Two: u32,
    Three: (Vec2, u64),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithPrimitives {
    #[key]
    player: ContractAddress,
    before: u8,
    after: u16,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithStruct {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Vec2,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithSimpleArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<u32>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithByteArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ByteArray,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithComplexArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<Vec2>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithSimpleTuple {
    #[key]
    player: ContractAddress,
    before: u8,
    after: (u8, u256),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithComplexTuple {
    #[key]
    player: ContractAddress,
    before: u8,
    after: (u8, Vec2, EnumCustom),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedArrays {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<Array<Array<Vec2>>>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedTuples {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, EnumCustom)),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedTuplesAndByteArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, ByteArray)),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedEverything {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, EnumCustom), (Array<(u32, Vec2)>, EnumCustom), (u16,))
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct StructWithBadOption {
    x: Option<(u8, u16)>
}

#[derive(Copy, Drop, Serde, Introspect)]
enum EnumWithBadOption {
    first: Option<(u8, u16)>,
}

#[derive(Introspect, IntrospectPacked)]
enum EnumIncompatibleAttrs {}

#[derive(Introspect, IntrospectPacked)]
struct StructIncompatibleAttrs {}

#[derive(Introspect)]
#[derive(IntrospectPacked)]
struct StructIncompatibleAttrs2 {}

#[derive(Introspect)]
#[derive(IntrospectPacked)]
enum EnumIncompatibleAttrs2 {}

#[derive(IntrospectPacked)]
struct StructPacked1 {
    x: u8
}

#[derive(IntrospectPacked)]
struct StructPacked2 {
    x: u8,
    y: u256
}

#[derive(IntrospectPacked)]
struct StructPacked3 {
    x: u256,
    y: (u8, u32)
}

#[derive(IntrospectPacked)]
struct StructNotPackable1 {
    x: u8,
    y: Array<u32>
}

#[derive(IntrospectPacked)]
struct StructPackableWithInnerPacked {
    x: u8,
    y: StructPacked1
}

#[derive(IntrospectPacked)]
enum EnumPacked1 {
    a,
    b,
    c
}

#[derive(IntrospectPacked)]
enum EnumPacked2 {
    a: u8,
    b: u8,
    c: u8
}

#[derive(IntrospectPacked)]
enum EnumPacked3 {
    a: (u128, u128),
    b: u256,
}


#[derive(IntrospectPacked)]
enum EnumPackableWithInnerPacked {
    a: StructPacked1,
    b: StructPacked1,
}

#[derive(IntrospectPacked)]
enum EnumNotPackable1 {
    a: u8,
    b: u256,
}
impl Vec2Copy of core::traits::Copy::<Vec2>;
impl Vec2Drop of core::traits::Drop::<Vec2>;
impl Vec2Serde of core::serde::Serde::<Vec2> {
    fn serialize(self: @Vec2, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.x, ref output);
        core::serde::Serde::serialize(self.y, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<Vec2> {
        core::option::Option::Some(Vec2 {
            x: core::serde::Serde::deserialize(ref serialized)?,
            y: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl PlainEnumSerde of core::serde::Serde::<PlainEnum> {
    fn serialize(self: @PlainEnum, ref output: core::array::Array<felt252>) {
        match self {
            PlainEnum::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            PlainEnum::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<PlainEnum> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => PlainEnum::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => PlainEnum::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl PlainEnumCopy of core::traits::Copy::<PlainEnum>;
impl PlainEnumDrop of core::traits::Drop::<PlainEnum>;
impl EnumWithPrimitiveSerde of core::serde::Serde::<EnumWithPrimitive> {
    fn serialize(self: @EnumWithPrimitive, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithPrimitive::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithPrimitive::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithPrimitive> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithPrimitive::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithPrimitive::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithPrimitiveCopy of core::traits::Copy::<EnumWithPrimitive>;
impl EnumWithPrimitiveDrop of core::traits::Drop::<EnumWithPrimitive>;
impl EnumWithStructSerde of core::serde::Serde::<EnumWithStruct> {
    fn serialize(self: @EnumWithStruct, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithStruct::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithStruct::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithStruct> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithStruct::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithStruct::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithStructCopy of core::traits::Copy::<EnumWithStruct>;
impl EnumWithStructDrop of core::traits::Drop::<EnumWithStruct>;
impl EnumWithSimpleArraySerde of core::serde::Serde::<EnumWithSimpleArray> {
    fn serialize(self: @EnumWithSimpleArray, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithSimpleArray::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithSimpleArray::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithSimpleArray> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithSimpleArray::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithSimpleArray::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithSimpleArrayCopy of core::traits::Copy::<EnumWithSimpleArray>;
impl EnumWithSimpleArrayDrop of core::traits::Drop::<EnumWithSimpleArray>;
impl EnumWithByteArraySerde of core::serde::Serde::<EnumWithByteArray> {
    fn serialize(self: @EnumWithByteArray, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithByteArray::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithByteArray::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithByteArray> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithByteArray::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithByteArray::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithByteArrayCopy of core::traits::Copy::<EnumWithByteArray>;
impl EnumWithByteArrayDrop of core::traits::Drop::<EnumWithByteArray>;
impl EnumWithSimpleTupleSerde of core::serde::Serde::<EnumWithSimpleTuple> {
    fn serialize(self: @EnumWithSimpleTuple, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithSimpleTuple::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithSimpleTuple::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithSimpleTuple> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithSimpleTuple::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithSimpleTuple::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithSimpleTupleCopy of core::traits::Copy::<EnumWithSimpleTuple>;
impl EnumWithSimpleTupleDrop of core::traits::Drop::<EnumWithSimpleTuple>;
impl EnumWithComplexTupleSerde of core::serde::Serde::<EnumWithComplexTuple> {
    fn serialize(self: @EnumWithComplexTuple, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithComplexTuple::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithComplexTuple::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithComplexTuple> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithComplexTuple::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithComplexTuple::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithComplexTupleCopy of core::traits::Copy::<EnumWithComplexTuple>;
impl EnumWithComplexTupleDrop of core::traits::Drop::<EnumWithComplexTuple>;
impl EnumWithPrimitiveSerde of core::serde::Serde::<EnumWithPrimitive> {
    fn serialize(self: @EnumWithPrimitive, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithPrimitive::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithPrimitive::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithPrimitive> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithPrimitive::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithPrimitive::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithPrimitiveCopy of core::traits::Copy::<EnumWithPrimitive>;
impl EnumWithPrimitiveDrop of core::traits::Drop::<EnumWithPrimitive>;
impl EnumCustomSerde of core::serde::Serde::<EnumCustom> {
    fn serialize(self: @EnumCustom, ref output: core::array::Array<felt252>) {
        match self {
            EnumCustom::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumCustom::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumCustom> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumCustom::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumCustom::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumCustomCopy of core::traits::Copy::<EnumCustom>;
impl EnumCustomDrop of core::traits::Drop::<EnumCustom>;
impl EnumTupleMixSerde of core::serde::Serde::<EnumTupleMix> {
    fn serialize(self: @EnumTupleMix, ref output: core::array::Array<felt252>) {
        match self {
            EnumTupleMix::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumTupleMix::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumTupleMix> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumTupleMix::Left(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumTupleMix::Right(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumTupleMixCopy of core::traits::Copy::<EnumTupleMix>;
impl EnumTupleMixDrop of core::traits::Drop::<EnumTupleMix>;
impl EnumWithDifferentVariantDataSerde of core::serde::Serde::<EnumWithDifferentVariantData> {
    fn serialize(self: @EnumWithDifferentVariantData, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithDifferentVariantData::One(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithDifferentVariantData::Two(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumWithDifferentVariantData::Three(x) => { core::serde::Serde::serialize(@2, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithDifferentVariantData> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithDifferentVariantData::One(core::serde::Serde::deserialize(ref serialized)?),
                1 => EnumWithDifferentVariantData::Two(core::serde::Serde::deserialize(ref serialized)?),
                2 => EnumWithDifferentVariantData::Three(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}
impl EnumWithDifferentVariantDataCopy of core::traits::Copy::<EnumWithDifferentVariantData>;
impl EnumWithDifferentVariantDataDrop of core::traits::Drop::<EnumWithDifferentVariantData>;
impl StructWithPrimitivesCopy of core::traits::Copy::<StructWithPrimitives>;
impl StructWithPrimitivesDrop of core::traits::Drop::<StructWithPrimitives>;
impl StructWithStructCopy of core::traits::Copy::<StructWithStruct>;
impl StructWithStructDrop of core::traits::Drop::<StructWithStruct>;
impl StructWithSimpleArrayCopy of core::traits::Copy::<StructWithSimpleArray>;
impl StructWithSimpleArrayDrop of core::traits::Drop::<StructWithSimpleArray>;
impl StructWithByteArrayCopy of core::traits::Copy::<StructWithByteArray>;
impl StructWithByteArrayDrop of core::traits::Drop::<StructWithByteArray>;
impl StructWithComplexArrayCopy of core::traits::Copy::<StructWithComplexArray>;
impl StructWithComplexArrayDrop of core::traits::Drop::<StructWithComplexArray>;
impl StructWithSimpleTupleCopy of core::traits::Copy::<StructWithSimpleTuple>;
impl StructWithSimpleTupleDrop of core::traits::Drop::<StructWithSimpleTuple>;
impl StructWithComplexTupleCopy of core::traits::Copy::<StructWithComplexTuple>;
impl StructWithComplexTupleDrop of core::traits::Drop::<StructWithComplexTuple>;
impl StructWithNestedArraysCopy of core::traits::Copy::<StructWithNestedArrays>;
impl StructWithNestedArraysDrop of core::traits::Drop::<StructWithNestedArrays>;
impl StructWithNestedTuplesCopy of core::traits::Copy::<StructWithNestedTuples>;
impl StructWithNestedTuplesDrop of core::traits::Drop::<StructWithNestedTuples>;
impl StructWithNestedTuplesAndByteArrayCopy of core::traits::Copy::<StructWithNestedTuplesAndByteArray>;
impl StructWithNestedTuplesAndByteArrayDrop of core::traits::Drop::<StructWithNestedTuplesAndByteArray>;
impl StructWithNestedEverythingCopy of core::traits::Copy::<StructWithNestedEverything>;
impl StructWithNestedEverythingDrop of core::traits::Drop::<StructWithNestedEverything>;
impl GenericStructCopy<T, +core::traits::Copy<T>> of core::traits::Copy::<GenericStruct<T>>;
impl GenericStructDrop<T, +core::traits::Drop<T>> of core::traits::Drop::<GenericStruct<T>>;
impl GenericStructSerde<T, +core::serde::Serde<T>, +core::traits::Destruct<T>> of core::serde::Serde::<GenericStruct<T>> {
    fn serialize(self: @GenericStruct<T>, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.t, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<GenericStruct<T>> {
        core::option::Option::Some(GenericStruct {
            t: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl StructWithBadOptionCopy of core::traits::Copy::<StructWithBadOption>;
impl StructWithBadOptionDrop of core::traits::Drop::<StructWithBadOption>;
impl StructWithBadOptionSerde of core::serde::Serde::<StructWithBadOption> {
    fn serialize(self: @StructWithBadOption, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.x, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<StructWithBadOption> {
        core::option::Option::Some(StructWithBadOption {
            x: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl EnumWithBadOptionCopy of core::traits::Copy::<EnumWithBadOption>;
impl EnumWithBadOptionDrop of core::traits::Drop::<EnumWithBadOption>;
impl EnumWithBadOptionSerde of core::serde::Serde::<EnumWithBadOption> {
    fn serialize(self: @EnumWithBadOption, ref output: core::array::Array<felt252>) {
        match self {
            EnumWithBadOption::first(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumWithBadOption> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            match idx {
                0 => EnumWithBadOption::first(core::serde::Serde::deserialize(ref serialized)?),
                _ => { return core::option::Option::None; }
            }
        )
    }
}

//! > expected_diagnostics
error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:1:1
use core::serde::Serde;
^*********************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:3:1
#[derive(Copy, Drop, Serde, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:9:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:15:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:21:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:27:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:33:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:39:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:45:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:51:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:57:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:63:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:69:1
#[derive(Serde, Copy, Drop, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:76:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:84:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:92:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:100:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:108:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:116:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:124:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:132:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:140:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:148:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:156:1
#[derive(Copy, Drop, Introspect)]
^*******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:164:1
#[derive(Copy, Drop, Serde, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:169:1
#[derive(Copy, Drop, Serde, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:174:1
#[derive(Copy, Drop, Serde, Introspect)]
^**************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:179:1
#[derive(Introspect, IntrospectPacked)]
^*************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:182:1
#[derive(Introspect, IntrospectPacked)]
^*************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:185:1
#[derive(Introspect)]
^*******************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:189:1
#[derive(Introspect)]
^*******************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:193:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:198:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:204:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:210:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:216:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:222:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:229:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:236:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:243:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:249:1
#[derive(IntrospectPacked)]
^*************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:2:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:2:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:2:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:8:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:8:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:8:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:14:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:14:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:14:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:20:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:20:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:20:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:26:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:26:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:26:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:32:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:32:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:32:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:38:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:38:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:38:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:44:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:44:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:44:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:50:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:50:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:50:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:56:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:56:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:56:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:62:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:62:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:62:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:68:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:68:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:68:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:75:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:75:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:83:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:83:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:91:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:91:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:99:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:99:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:107:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:107:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:115:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:115:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:123:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:123:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:131:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:131:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:139:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:139:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:147:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:147:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:155:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:155:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:163:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:163:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:163:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:168:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:168:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:168:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:173:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:173:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid.
 --> test_src/lib.cairo:173:1

^
