//! > Test expansion of the derive(Introspect).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use core::serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left,
    Right,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithPrimitive {
    Left: u32,
    Right: u32,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithStruct {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithSimpleArray {
    Left: Array<u32>,
    Right: Array<u32>,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithByteArray {
    Left: ByteArray,
    Right: ByteArray,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithSimpleTuple {
    Left: (u8, u256),
    Right: (u8, u256),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithComplexTuple {
    Left: (u8, Vec2),
    Right: (u8, Vec2),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithPrimitive {
    Left: u32,
    Right: u32,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTupleMix {
    Left: (Vec2, u64, EnumCustom),
    Right: (Vec2, u64, EnumCustom),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumWithDifferentVariantData {
    One,
    Two: u32,
    Three: (Vec2, u64),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithPrimitives {
    #[key]
    player: ContractAddress,
    before: u8,
    after: u16,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithStruct {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Vec2,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithSimpleArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<u32>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithByteArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ByteArray,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithComplexArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<Vec2>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithSimpleTuple {
    #[key]
    player: ContractAddress,
    before: u8,
    after: (u8, u256),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithComplexTuple {
    #[key]
    player: ContractAddress,
    before: u8,
    after: (u8, Vec2, EnumCustom),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedArrays {
    #[key]
    player: ContractAddress,
    before: u8,
    after: Array<Array<Array<Vec2>>>,
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedTuples {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, EnumCustom)),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedTuplesAndByteArray {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, ByteArray)),
}

#[derive(Copy, Drop, Introspect)]
struct StructWithNestedEverything {
    #[key]
    player: ContractAddress,
    before: u8,
    after: ((u8, u32), (Vec2, EnumCustom), (Array<(u32, Vec2)>, EnumCustom), (u16,))
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct StructWithBadOption {
    x: Option<(u8, u16)>
}

#[derive(Copy, Drop, Serde, Introspect)]
enum EnumWithBadOption {
    first: Option<(u8, u16)>,
}

#[derive(Introspect, IntrospectPacked)]
enum EnumIncompatibleAttrs {}

#[derive(Introspect, IntrospectPacked)]
struct StructIncompatibleAttrs {}

#[derive(Introspect)]
#[derive(IntrospectPacked)]
struct StructIncompatibleAttrs2 {}

#[derive(Introspect)]
#[derive(IntrospectPacked)]
enum EnumIncompatibleAttrs2 {}

#[derive(IntrospectPacked)]
struct StructPacked1 {
    x: u8
}

#[derive(IntrospectPacked)]
struct StructPacked2 {
    x: u8,
    y: u256
}

#[derive(IntrospectPacked)]
struct StructPacked3 {
    x: u256,
    y: (u8, u32)
}

#[derive(IntrospectPacked)]
struct StructNotPackable1 {
    x: u8,
    y: Array<u32>
}

#[derive(IntrospectPacked)]
struct StructPackableWithInnerPacked {
    x: u8,
    y: StructPacked1
}

#[derive(IntrospectPacked)]
enum EnumPacked1 {
    a,
    b,
    c
}

#[derive(IntrospectPacked)]
enum EnumPacked2 {
    a: u8,
    b: u8,
    c: u8
}

#[derive(IntrospectPacked)]
enum EnumPacked3 {
    a: (u128, u128),
    b: u256,
}


#[derive(IntrospectPacked)]
enum EnumPackableWithInnerPacked {
    a: StructPacked1,
    b: StructPacked1,
}

#[derive(IntrospectPacked)]
enum EnumNotPackable1 {
    a: u8,
    b: u256,
}

//! > expanded_cairo_code
use serde::Serde;
use debug::PrintTrait;

#[derive(Print)]
struct Position {
    #[key]
    id: felt252,
    x: felt252,
    y: felt252
}

#[derive(Print)]
struct Roles {
    role_ids: Array<u8>
}

use starknet::ContractAddress;

#[derive(Print)]
struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,
    name: felt252,
}

#[derive(Print)]
enum Enemy {
    Unknown,
    Bot: felt252,
    OtherPlayer: ContractAddress,
}

//! > expected_diagnostics
error: Unknown derive `Print` - a plugin might be missing.
 --> /tmp/plugin_test/src/lib.cairo:4:10
#[derive(Print)]
         ^***^

error: Unknown derive `Print` - a plugin might be missing.
 --> /tmp/plugin_test/src/lib.cairo:12:10
#[derive(Print)]
         ^***^

error: Unknown derive `Print` - a plugin might be missing.
 --> /tmp/plugin_test/src/lib.cairo:19:10
#[derive(Print)]
         ^***^

error: Unknown derive `Print` - a plugin might be missing.
 --> /tmp/plugin_test/src/lib.cairo:28:10
#[derive(Print)]
         ^***^
