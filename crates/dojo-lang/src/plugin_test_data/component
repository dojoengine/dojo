//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use dojo::world::ComponentTrait;

#[derive(Component)]
struct Position {
    x: felt252,
    y: felt252
}

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x & self.y == b.y
    }
}

//! > generated_cairo_code
use dojo::world::ComponentTrait;

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x & self.y == b.y
    }
}

#[derive(Copy, Drop)]
struct Position {
    x: felt252,
    y: felt252
}

#[abi]
trait IPosition {
    fn set(entity_id: usize, value: Position);
    fn get(entity_id: usize) -> Position;
    fn get_is_writer_authorized(writer: starknet::ContractAddress) -> bool;
}

#[contract]
mod PositionComponent {
    use option::OptionTrait;
    use array::ArrayTrait;
    use box::BoxTrait;
    use starknet::SyscallResult;
    use starknet::ContractAddress;
    use traits::Into;
    use traits::TryInto;
    use super::Position;

    impl PositionSerde of serde::Serde::<Position> {
        fn serialize(ref serialized: Array::<felt252>, input: Position) {
            serde::Serde::<felt252>::serialize(ref serialized, input.x);
            serde::Serde::<felt252>::serialize(ref serialized, input.y);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<Position> {
            Option::Some(
                Position {
                    x: serde::Serde::<felt252>::deserialize(ref serialized)?,
                    y: serde::Serde::<felt252>::deserialize(ref serialized)?,
                }
            )
        }
    }

    impl StorageAccessPosition of starknet::StorageAccess::<Position> {
        fn read(
            address_domain: u32, base: starknet::StorageBaseAddress
        ) -> starknet::SyscallResult::<Position> {
            Result::Ok(
                Position {
                    x: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                    )?,
                    y: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8)
                    )?,
                }
            )
        }
        fn write(
            address_domain: u32, base: starknet::StorageBaseAddress, value: Position
        ) -> starknet::SyscallResult::<()> {
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.x
            )?;
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8), value.y
            )
        }
    }


    struct Storage {
        state: LegacyMap::<usize, Position>,
        authorized_writers: LegacyMap::<ContractAddress, bool>,
    }

    // Initialize Position.
    #[external]
    fn initialize(writers: Array<ContractAddress>) {
        initialize_inner(@writers, 0_usize);
    }

    fn initialize_inner(writers: @Array<ContractAddress>, i: usize) {
        match writers.get(i) {
            Option::Some(w) => {
                authorized_writers::write(*w.unbox(), true);
                initialize_inner(writers, i + 1_usize);
            },
            Option::None(()) => (),
        }
    }

    // Set the state of an entity.
    #[external]
    fn set(entity_id: usize, value: Position) {
        let caller_address = starknet::get_caller_address();
        let is_authorized = authorized_writers::read(caller_address);
        assert(is_authorized, 'Unauthorized writer.');
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: usize) -> Position {
        return state::read(entity_id);
    }

    // True if the writer is authorized to modify entities state.
    #[view]
    fn get_is_writer_authorized(writer: ContractAddress) -> bool {
        return authorized_writers::read(writer);
    }
}

//! > expected_diagnostics
