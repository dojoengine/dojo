//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use serde::Serde;

#[derive(Component)]
struct Position {
    x: felt252,
    y: felt252
}

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x & self.y == b.y
    }
}

//! > generated_cairo_code
use serde::Serde;

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x & self.y == b.y
    }
}

#[derive(Copy, Drop, Serde)]
struct Position {
    x: felt252,
    y: felt252
}

#[abi]
trait IPosition {
    fn name() -> felt252;
    fn len() -> u8;
}

#[contract]
mod PositionComponent {
    use dojo_core::serde::SpanSerde;
    use super::Position;

    #[view]
    fn schema() -> Array<(felt252, felt252, u8)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('x', 'felt252', 252));
        array::ArrayTrait::append(ref arr, ('y', 'felt252', 252));

        arr
    }


    #[view]
    fn name() -> felt252 {
        'Position'
    }

    #[view]
    fn len() -> usize {
        2_usize
    }

    #[view]
    fn is_indexed() -> bool {
        bool::False(())
    }
}

//! > expected_diagnostics
