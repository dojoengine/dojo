//! > Test expansion of the component contract.

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use serde::Serde;

#[derive(Component, Copy, Drop, Serde, SerdeLen)]
struct Position {
    #[key]
    key: felt252,

    x: felt252,
    y: felt252
}

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}

#[derive(Component, Serde)]
struct Roles {
    role_ids: Array<u8>
}

impl RolesSerdeLen of dojo::SerdeLen<Roles> {
    #[inline(always)]
    fn len() -> usize {
        5
    }
}

#[derive(Component, Copy, Drop, Serde, SerdeLen)]
struct Player {
    #[key]
    game: felt252,

    #[key]
    player: felt252,

    name: felt252, 
}

//! > generated_cairo_code
use serde::Serde;

struct Position {
    #[key]
    key: felt252,
    x: felt252,
    y: felt252
}

impl PositionComponent of dojo::traits::Component<Position> {
    fn name(self: @Position) -> felt252 {
        'Position'
    }

    fn key(self: @Position) -> felt252 {
        let mut serialized = ArrayTrait::new();
        self.key.serialize(ref serialized);
        poseidon::poseidon_hash_span(serialized.span())
    }
}

#[starknet::interface]
trait IPosition<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod position {
    use super::Position;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Position'
    }

    #[external(v0)]
    fn size(self: @ContractState) -> usize {
        dojo::SerdeLen::<Position>::len()
    }
}

impl SerdeLenPosition of dojo::SerdeLen<Position> {
    #[inline(always)]
    fn len() -> usize {
        dojo::SerdeLen::<felt252>::len()
            + dojo::SerdeLen::<felt252>::len()
            + dojo::SerdeLen::<felt252>::len()
    }
}



trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}


impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}

struct Roles {
    role_ids: Array<u8>
}

impl RolesComponent of dojo::traits::Component<Roles> {
    fn name(self: @Roles) -> felt252 {
        'Roles'
    }

    fn key(self: @Roles) -> felt252 {
        let mut serialized = ArrayTrait::new();

        poseidon::poseidon_hash_span(serialized.span())
    }
}

#[starknet::interface]
trait IRoles<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod roles {
    use super::Roles;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Roles'
    }

    #[external(v0)]
    fn size(self: @ContractState) -> usize {
        dojo::SerdeLen::<Roles>::len()
    }
}



impl RolesSerdeLen of dojo::SerdeLen<Roles> {
    #[inline(always)]
    fn len() -> usize {
        5
    }
}

struct Player {
    #[key]
    game: felt252,
    #[key]
    player: felt252,
    name: felt252,
}

impl PlayerComponent of dojo::traits::Component<Player> {
    fn name(self: @Player) -> felt252 {
        'Player'
    }

    fn key(self: @Player) -> felt252 {
        let mut serialized = ArrayTrait::new();
        self.game.serialize(ref serialized);
        self.player.serialize(ref serialized);
        poseidon::poseidon_hash_span(serialized.span())
    }
}

#[starknet::interface]
trait IPlayer<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod player {
    use super::Player;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Player'
    }

    #[external(v0)]
    fn size(self: @ContractState) -> usize {
        dojo::SerdeLen::<Player>::len()
    }
}

impl SerdeLenPlayer of dojo::SerdeLen<Player> {
    #[inline(always)]
    fn len() -> usize {
        dojo::SerdeLen::<felt252>::len()
            + dojo::SerdeLen::<felt252>::len()
            + dojo::SerdeLen::<felt252>::len()
    }
}

//! > expected_diagnostics
error: Component must define atleast one #[key] attribute
 --> dummy_file.cairo:31:8
struct Roles {
       ^***^
