//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[derive(Component)]
struct Position {
    x: felt252,
    y: felt252
}

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x & self.y == b.y
    }
}

//! > generated_cairo_code
trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x & self.y == b.y
    }
}

#[derive(Copy, Drop)]
struct Position {
    x: felt252,
    y: felt252
}

#[abi]
trait IPosition {
    fn set(key: felt252, value: Position);
    fn get(key: felt252) -> Position;
}

#[contract]
mod PositionComponent {
    use option::OptionTrait;
    use starknet::SyscallResult;
    use traits::Into;
    use traits::TryInto;

    use super::Position;

    impl PositionSerde of serde::Serde::<Position> {
        fn serialize(ref serialized: Array::<felt252>, input: Position) {
            serde::Serde::<felt252>::serialize(ref serialized, input.x);
            serde::Serde::<felt252>::serialize(ref serialized, input.y);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<Position> {
            Option::Some(
                Position {
                    x: serde::Serde::<felt252>::deserialize(ref serialized)?,
                    y: serde::Serde::<felt252>::deserialize(ref serialized)?,
                }
            )
        }
    }

    impl StorageAccessPosition of starknet::StorageAccess::<Position> {
        fn read(
            address_domain: u32, base: starknet::StorageBaseAddress
        ) -> starknet::SyscallResult::<Position> {
            Result::Ok(
                Position {
                    x: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                    )?,
                    y: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8)
                    )?,
                }
            )
        }
        fn write(
            address_domain: u32, base: starknet::StorageBaseAddress, value: Position
        ) -> starknet::SyscallResult::<()> {
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.x
            )?;
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8), value.y
            )
        }
    }


    struct Storage {
        state: LegacyMap::<felt252, Position>, 
    }

    // Initialize Position.
    #[external]
    fn initialize() {}

    // Set the state of an entity.
    #[external]
    fn set(key: felt252, value: Position) {
        state::write(key, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(key: felt252) -> Position {
        return state::read(key);
    }
}

//! > expected_diagnostics
