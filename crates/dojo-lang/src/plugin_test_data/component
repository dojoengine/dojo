//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use serde::Serde;

#[derive(Component, Copy, Drop, Serde)]
struct Position {
    x: felt252,
    y: felt252
}

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}

#[derive(Component, Serde)]
struct Roles {
    role_ids: Array<u8>
}

#[derive(Component, Copy, Drop, Serde)]
struct Player {
    name: felt252, 
}

//! > generated_cairo_code
use serde::Serde;

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}

struct Position {
    x: felt252,
    y: felt252
}

#[starknet::interface]
trait IPosition<T> {
    fn name(self: @T) -> felt252;
    fn len(self: @T) -> u8;
}

#[starknet::contract]
mod PositionComponent {
    use super::Position;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, usize, u8)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('x', 'felt252', 0, 0));
        array::ArrayTrait::append(ref arr, ('y', 'felt252', 1, 0));

        arr
    }


    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Position'
    }

    #[external(v0)]
    fn len(self: @ContractState) -> usize {
        2_usize
    }

    #[external(v0)]
    fn is_indexed(self: @ContractState) -> bool {
        bool::False(())
    }
}

struct Roles {
    role_ids: Array<u8>
}

#[starknet::interface]
trait IRoles<T> {
    fn name(self: @T) -> felt252;
    fn len(self: @T) -> u8;
}

#[starknet::contract]
mod RolesComponent {
    use super::Roles;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, usize, u8)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('role_ids', 'Array<u8>', 0, 0));

        arr
    }


    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Roles'
    }

    #[external(v0)]
    fn len(self: @ContractState) -> usize {
        1_usize
    }

    #[external(v0)]
    fn is_indexed(self: @ContractState) -> bool {
        bool::False(())
    }
}

struct Player {
    name: felt252, 
}

#[starknet::interface]
trait IPlayer<T> {
    fn name(self: @T) -> felt252;
    fn len(self: @T) -> u8;
}

#[starknet::contract]
mod PlayerComponent {
    use super::Player;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, usize, u8)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('name', 'felt252', 0, 0));

        arr
    }


    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Player'
    }

    #[external(v0)]
    fn len(self: @ContractState) -> usize {
        1_usize
    }

    #[external(v0)]
    fn is_indexed(self: @ContractState) -> bool {
        bool::False(())
    }
}

//! > expected_diagnostics
