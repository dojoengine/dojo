//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use dojo::world::ComponentTrait;

#[derive(Component)]
struct Position {
    x: felt,
    y: felt
}

impl Position of Component {
    #[view]
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    #[view]
    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x & self.y == b.y
    }
}

//! > generated_cairo_code
use dojo::world::ComponentTrait;

#[derive(Copy, Drop)]
struct Position {
    x: felt,
    y: felt
}

impl PositionSerde of serde::Serde::<Position> {
    fn serialize(ref serialized: Array::<felt>, input: Position) {
        serde::Serde::<felt>::serialize(ref serialized, input.x);
        serde::Serde::<felt>::serialize(ref serialized, input.y);
    }
    fn deserialize(ref serialized: Span::<felt>) -> Option::<Position> {
        Option::Some(
            Position {
                x: serde::Serde::<felt>::deserialize(ref serialized)?,
                y: serde::Serde::<felt>::deserialize(ref serialized)?,
            }
        )
    }
}

impl StorageAccessPosition of starknet::StorageAccess::<Position> {
    fn read(
        address_domain: felt, base: starknet::StorageBaseAddress
    ) -> starknet::SyscallResult::<Position> {
        Result::Ok(
            Position {
                x: starknet::storage_read_syscall(
                    address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                )?,
                y: starknet::storage_read_syscall(
                    address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8)
                )?,
            }
        )
    }
    fn write(
        address_domain: felt, base: starknet::StorageBaseAddress, value: Position
    ) -> starknet::SyscallResult::<()> {
        starknet::storage_write_syscall(
            address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.x
        )?;
        starknet::storage_write_syscall(
            address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8), value.y
        )
    }
}

#[contract]
mod PositionComponent {
    use super::Position;
    use super::PositionSerde;
    use super::StorageAccessPosition;

    struct Storage {
        state: LegacyMap::<felt, Position>, 
    }

    // Initialize Position.
    #[external]
    fn initialize() {}

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Position) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Position {
        return state::read(entity_id);
    }


    #[view]
    fn is_zero(entity_id: felt) -> bool {
        let self = state::read(entity_id);
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    #[view]
    fn is_equal(entity_id: felt, b: Position) -> bool {
        let self = state::read(entity_id);
        self.x == b.x & self.y == b.y
    }
}

//! > expected_diagnostics
