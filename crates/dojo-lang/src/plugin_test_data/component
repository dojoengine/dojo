//! > Test expansion of the component contract.

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use serde::Serde;

#[derive(Component, Copy, Drop, Serde)]
struct Position {
    #[key]
    id: felt252,

    x: felt252,
    y: felt252
}

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}

#[derive(Component, Serde)]
struct Roles {
    role_ids: Array<u8>
}

use starknet::ContractAddress;

#[derive(Component, Copy, Drop, Serde)]
struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,

    name: felt252, 
}

//! > generated_cairo_code
use serde::Serde;

struct Position {
    #[key]
    id: felt252,
    x: felt252,
    y: felt252
}

impl PositionComponent of dojo::component::Component<Position> {
    #[inline(always)]
    fn name(self: @Position) -> felt252 {
        'Position'
    }

    #[inline(always)]
    fn keys(self: @Position) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.id);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn pack(self: @Position) -> Span<felt252> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Position>::layout(ref layout);

        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.x);
        array::ArrayTrait::append(ref serialized, *self.y);

        let mut serialized_span = array::ArrayTrait::span(@serialized);
        let mut layout_span = array::ArrayTrait::span(@layout);
        dojo::packing::pack(ref serialized_span, ref layout_span)
    }

    #[inline(always)]
    fn unpack(ref packed: Span<felt252>) -> Option<Position> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Position>::layout(ref layout);
        let mut layout_span = array::ArrayTrait::span(@layout);
        let mut unpacked = dojo::packing::unpack(ref packed, ref layout_span)?;
        serde::Serde::deserialize(ref unpacked)
    }
}

impl PositionStorageLayout of dojo::StorageLayout<Position> {
    #[inline(always)]
    fn size() -> usize {
        dojo::StorageLayout::<felt252>::size() + dojo::StorageLayout::<felt252>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::StorageLayout::<felt252>::layout(ref layout);
        dojo::StorageLayout::<felt252>::layout(ref layout);
    }
}

#[cfg(test)]
impl PositionPrintImpl of debug::PrintTrait<Position> {
    fn print(self: Position) {
        debug::PrintTrait::print('id');
        debug::PrintTrait::print(self.id);
        debug::PrintTrait::print('x');
        debug::PrintTrait::print(self.x);
        debug::PrintTrait::print('y');
        debug::PrintTrait::print(self.y);
    }
}

#[starknet::interface]
trait IPosition<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod position {
    use super::Position;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Position'
    }

    #[external(v0)]
    fn size(self: @ContractState) -> usize {
        dojo::StorageLayout::<Position>::size()
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Position>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, bool)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('id', 'felt252', true));
        array::ArrayTrait::append(ref arr, ('x', 'felt252', false));
        array::ArrayTrait::append(ref arr, ('y', 'felt252', false));
        arr
    }
}



trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}


impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}

struct Roles {
    role_ids: Array<u8>
}

impl RolesComponent of dojo::component::Component<Roles> {
    #[inline(always)]
    fn name(self: @Roles) -> felt252 {
        'Roles'
    }

    #[inline(always)]
    fn keys(self: @Roles) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();

        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn pack(self: @Roles) -> Span<felt252> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Roles>::layout(ref layout);

        let mut serialized = ArrayTrait::new();
        serde::Serde::serialize(self.role_ids, ref serialized);

        let mut serialized_span = array::ArrayTrait::span(@serialized);
        let mut layout_span = array::ArrayTrait::span(@layout);
        dojo::packing::pack(ref serialized_span, ref layout_span)
    }

    #[inline(always)]
    fn unpack(ref packed: Span<felt252>) -> Option<Roles> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Roles>::layout(ref layout);

        let mut layout_span = array::ArrayTrait::span(@layout);
        let mut unpacked = dojo::packing::unpack(ref packed, ref layout_span)?;
        serde::Serde::deserialize(ref unpacked)
    }
}

impl RolesStorageLayout of dojo::StorageLayout<Roles> {
    #[inline(always)]
    fn size() -> usize {
        dojo::StorageLayout::<Array<u8>>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::StorageLayout::<Array<u8>>::layout(ref layout);
    }
}

#[cfg(test)]
impl RolesPrintImpl of debug::PrintTrait<Roles> {
    fn print(self: Roles) {
        debug::PrintTrait::print('role_ids');
        debug::PrintTrait::print(self.role_ids);
    }
}

#[starknet::interface]
trait IRoles<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod roles {
    use super::Roles;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Roles'
    }

    #[external(v0)]
    fn size(self: @ContractState) -> usize {
        dojo::StorageLayout::<Roles>::size()
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Roles>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, bool)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('role_ids', 'Array<u8>', false));
        arr
    }
}



use starknet::ContractAddress;

struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,
    name: felt252,
}

impl PlayerComponent of dojo::component::Component<Player> {
    #[inline(always)]
    fn name(self: @Player) -> felt252 {
        'Player'
    }

    #[inline(always)]
    fn keys(self: @Player) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.game);
        serde::Serde::serialize(self.player, ref serialized);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn pack(self: @Player) -> Span<felt252> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Player>::layout(ref layout);

        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.name);

        let mut serialized_span = array::ArrayTrait::span(@serialized);
        let mut layout_span = array::ArrayTrait::span(@layout);
        dojo::packing::pack(ref serialized_span, ref layout_span)
    }

    #[inline(always)]
    fn unpack(ref packed: Span<felt252>) -> Option<Player> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Player>::layout(ref layout);

        let mut layout_span = array::ArrayTrait::span(@layout);
        let mut unpacked = dojo::packing::unpack(ref packed, ref layout_span)?;
        serde::Serde::deserialize(ref unpacked)
    }
}

impl PlayerStorageLayout of dojo::StorageLayout<Player> {
    #[inline(always)]
    fn size() -> usize {
        dojo::StorageLayout::<felt252>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::StorageLayout::<felt252>::layout(ref layout);
    }
}

#[cfg(test)]
impl PlayerPrintImpl of debug::PrintTrait<Player> {
    fn print(self: Player) {
        debug::PrintTrait::print('game');
        debug::PrintTrait::print(self.game);
        debug::PrintTrait::print('player');
        debug::PrintTrait::print(self.player);
        debug::PrintTrait::print('name');
        debug::PrintTrait::print(self.name);
    }
}

#[starknet::interface]
trait IPlayer<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod player {
    use super::Player;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Player'
    }

    #[external(v0)]
    fn size(self: @ContractState) -> usize {
        dojo::StorageLayout::<Player>::size()
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::StorageLayout::<Player>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, bool)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('game', 'felt252', true));
        array::ArrayTrait::append(ref arr, ('player', 'ContractAddress', true));
        array::ArrayTrait::append(ref arr, ('name', 'felt252', false));
        arr
    }
}

//! > expected_diagnostics
error: Component must define atleast one #[key] attribute
 --> dummy_file.cairo:31:8
struct Roles {
       ^***^
