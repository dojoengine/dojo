//! > Test expansion of the #[system].

//! > test_runner_name
test_expand_plugin

//! > cairo_code
#[dojo::contract]
mod spawn {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract]
mod proxy {
    fn execute(value: felt252) -> felt252 {
        value
    }
}

#[dojo::contract]
mod ctxnamed {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx2: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract]
mod withevent {

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        TestEvent: TestEvent,
    }

    #[derive(Drop, starknet::Event)]
    struct TestEvent {
        address: ContractAddress,
    }

    #[external(v0)]
    fn test(value: felt252) -> value {
        value
    }
}

//! > generated_cairo_code
#[starknet::contract]
mod spawn {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;

    #[storage]
    struct Storage {
        world_dispatcher: IWorldDispatcher,
    }

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'spawn'
    }

    #[external(v0)]
    impl Upgradeable of dojo::upgradable::IUpgradeable<ContractState> {
        fn upgrade(ref self: ContractState, new_class_hash: starknet::ClassHash) {
            let caller = starknet::get_caller_address();
            assert(
                self.world_dispatcher.read().contract_address == caller, 'only World can upgrade'
            );
            dojo::upgradable::UpgradeableTrait::upgrade(new_class_hash);
        }
    }

    use traits::Into;
    use dojo::world::Context;

    #[external(v0)]
    fn execute(self: @ContractState, ctx: Context, name: felt252) {
        return ();
    }
}


#[starknet::contract]
mod proxy {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;

    #[storage]
    struct Storage {
        world_dispatcher: IWorldDispatcher,
    }

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'proxy'
    }

    #[external(v0)]
    impl Upgradeable of dojo::upgradable::IUpgradeable<ContractState> {
        fn upgrade(ref self: ContractState, new_class_hash: starknet::ClassHash) {
            let caller = starknet::get_caller_address();
            assert(
                self.world_dispatcher.read().contract_address == caller, 'only World can upgrade'
            );
            dojo::upgradable::UpgradeableTrait::upgrade(new_class_hash);
        }
    }


    #[external(v0)]
    fn execute(self: @ContractState, value: felt252) -> felt252 {
        value
    }
}


#[starknet::contract]
mod ctxnamed {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;

    #[storage]
    struct Storage {
        world_dispatcher: IWorldDispatcher,
    }

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'ctxnamed'
    }

    #[external(v0)]
    impl Upgradeable of dojo::upgradable::IUpgradeable<ContractState> {
        fn upgrade(ref self: ContractState, new_class_hash: starknet::ClassHash) {
            let caller = starknet::get_caller_address();
            assert(
                self.world_dispatcher.read().contract_address == caller, 'only World can upgrade'
            );
            dojo::upgradable::UpgradeableTrait::upgrade(new_class_hash);
        }
    }

    use traits::Into;
    use dojo::world::Context;

    #[external(v0)]
    fn execute(self: @ContractState, ctx2: Context, name: felt252) {
        return ();
    }
}

//! > expected_diagnostics
error: Unsupported attribute.
 --> test_src/lib.cairo[spawn]:2:17
                #[starknet::contract]
                ^*******************^

error: Unsupported attribute.
 --> test_src/lib.cairo[proxy]:2:17
                #[starknet::contract]
                ^*******************^

error: Unsupported attribute.
 --> test_src/lib.cairo[ctxnamed]:2:17
                #[starknet::contract]
                ^*******************^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:2:17
                #[starknet::contract]
                ^*******************^

error: Unknown inline item macro: 'component'.
 --> test_src/lib.cairo[spawn]:9:21
                    component!(path: dojo::components::upgradeable::upgradeable, storage: upgradeable, event: UpgradeableEvent);
                    ^**********************************************************************************************************^

error: Unsupported attribute.
 --> test_src/lib.cairo[spawn]:11:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[spawn]:16:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[spawn]:23:21
                    #[abi(embed_v0)]
                    ^**************^

error: Unsupported attribute.
 --> test_src/lib.cairo[spawn]:33:13
            #[event]
            ^******^

error: Unsupported attribute.
 --> test_src/lib.cairo[spawn]:39:13
            #[storage]
            ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo[spawn]:42:17
                #[substorage(v0)]
                ^***************^

error: Unknown inline item macro: 'component'.
 --> test_src/lib.cairo[proxy]:9:21
                    component!(path: dojo::components::upgradeable::upgradeable, storage: upgradeable, event: UpgradeableEvent);
                    ^**********************************************************************************************************^

error: Unsupported attribute.
 --> test_src/lib.cairo[proxy]:11:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[proxy]:16:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[proxy]:23:21
                    #[abi(embed_v0)]
                    ^**************^

error: Unsupported attribute.
 --> test_src/lib.cairo[proxy]:30:13
            #[event]
            ^******^

error: Unsupported attribute.
 --> test_src/lib.cairo[proxy]:36:13
            #[storage]
            ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo[proxy]:39:17
                #[substorage(v0)]
                ^***************^

error: Unknown inline item macro: 'component'.
 --> test_src/lib.cairo[ctxnamed]:9:21
                    component!(path: dojo::components::upgradeable::upgradeable, storage: upgradeable, event: UpgradeableEvent);
                    ^**********************************************************************************************************^

error: Unsupported attribute.
 --> test_src/lib.cairo[ctxnamed]:11:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[ctxnamed]:16:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[ctxnamed]:23:21
                    #[abi(embed_v0)]
                    ^**************^

error: Unsupported attribute.
 --> test_src/lib.cairo[ctxnamed]:33:13
            #[event]
            ^******^

error: Unsupported attribute.
 --> test_src/lib.cairo[ctxnamed]:39:13
            #[storage]
            ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo[ctxnamed]:42:17
                #[substorage(v0)]
                ^***************^

error: Unknown inline item macro: 'component'.
 --> test_src/lib.cairo[withevent]:9:21
                    component!(path: dojo::components::upgradeable::upgradeable, storage: upgradeable, event: UpgradeableEvent);
                    ^**********************************************************************************************************^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:11:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:16:21
                    #[external(v0)]
                    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:23:21
                    #[abi(embed_v0)]
                    ^**************^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:27:13
            #[event]
            ^******^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:39:5
    #[external(v0)]
    ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:44:13
            #[storage]
            ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo[withevent]:47:17
                #[substorage(v0)]
                ^***************^

//! > expanded_cairo_code
#[starknet::contract]
                mod spawn {
                    use dojo::world;
                    use dojo::world::IWorldDispatcher;
                    use dojo::world::IWorldDispatcherTrait;
                    use dojo::world::IWorldProvider;

                    #[external(v0)]
                    fn dojo_resource(self: @ContractState) -> felt252 {
                        'spawn'
                    }

                    #[external(v0)]
                    impl WorldProviderImpl of IWorldProvider<ContractState> {
                        fn world(self: @ContractState) -> IWorldDispatcher {
                            self.world_dispatcher.read()
                        }
                    }

                    #[abi(embed_v0)]
                    impl UpgradableImpl = dojo::components::upgradeable::upgradeable::UpgradableImpl<ContractState>;

                        use traits::Into;
    use dojo::world::Context;

    fn execute(ctx: Context, name: felt252) {
        return ();
    }

            #[event]
            #[derive(Drop, starknet::Event)]
            enum Event {
                UpgradeableEvent: dojo::components::upgradeable::upgradeable::Event,
            }
            
            #[storage]
            struct Storage {
                world_dispatcher: IWorldDispatcher,
                #[substorage(v0)]
                upgradeable: dojo::components::upgradeable::upgradeable::Storage,
            }
impl EventDrop of Drop::<Event>;
            
                }

                #[starknet::contract]
                mod proxy {
                    use dojo::world;
                    use dojo::world::IWorldDispatcher;
                    use dojo::world::IWorldDispatcherTrait;
                    use dojo::world::IWorldProvider;

                    #[external(v0)]
                    fn dojo_resource(self: @ContractState) -> felt252 {
                        'proxy'
                    }

                    #[external(v0)]
                    impl WorldProviderImpl of IWorldProvider<ContractState> {
                        fn world(self: @ContractState) -> IWorldDispatcher {
                            self.world_dispatcher.read()
                        }
                    }

                    #[abi(embed_v0)]
                    impl UpgradableImpl = dojo::components::upgradeable::upgradeable::UpgradableImpl<ContractState>;

                        fn execute(value: felt252) -> felt252 {
        value
    }

            #[event]
            #[derive(Drop, starknet::Event)]
            enum Event {
                UpgradeableEvent: dojo::components::upgradeable::upgradeable::Event,
            }
            
            #[storage]
            struct Storage {
                world_dispatcher: IWorldDispatcher,
                #[substorage(v0)]
                upgradeable: dojo::components::upgradeable::upgradeable::Storage,
            }
impl EventDrop of Drop::<Event>;
            
                }

                #[starknet::contract]
                mod ctxnamed {
                    use dojo::world;
                    use dojo::world::IWorldDispatcher;
                    use dojo::world::IWorldDispatcherTrait;
                    use dojo::world::IWorldProvider;

                    #[external(v0)]
                    fn dojo_resource(self: @ContractState) -> felt252 {
                        'ctxnamed'
                    }

                    #[external(v0)]
                    impl WorldProviderImpl of IWorldProvider<ContractState> {
                        fn world(self: @ContractState) -> IWorldDispatcher {
                            self.world_dispatcher.read()
                        }
                    }

                    #[abi(embed_v0)]
                    impl UpgradableImpl = dojo::components::upgradeable::upgradeable::UpgradableImpl<ContractState>;

                        use traits::Into;
    use dojo::world::Context;

    fn execute(ctx2: Context, name: felt252) {
        return ();
    }

            #[event]
            #[derive(Drop, starknet::Event)]
            enum Event {
                UpgradeableEvent: dojo::components::upgradeable::upgradeable::Event,
            }
            
            #[storage]
            struct Storage {
                world_dispatcher: IWorldDispatcher,
                #[substorage(v0)]
                upgradeable: dojo::components::upgradeable::upgradeable::Storage,
            }
impl EventDrop of Drop::<Event>;
            
                }

                #[starknet::contract]
                mod withevent {
                    use dojo::world;
                    use dojo::world::IWorldDispatcher;
                    use dojo::world::IWorldDispatcherTrait;
                    use dojo::world::IWorldProvider;

                    #[external(v0)]
                    fn dojo_resource(self: @ContractState) -> felt252 {
                        'withevent'
                    }

                    #[external(v0)]
                    impl WorldProviderImpl of IWorldProvider<ContractState> {
                        fn world(self: @ContractState) -> IWorldDispatcher {
                            self.world_dispatcher.read()
                        }
                    }

                    #[abi(embed_v0)]
                    impl UpgradableImpl = dojo::components::upgradeable::upgradeable::UpgradableImpl<ContractState>;

                    
            #[event]
            #[derive(Drop, starknet::Event)]
            enum Event {
                UpgradeableEvent: dojo::components::upgradeable::upgradeable::Event,
                        TestEvent: TestEvent
            }
            
    #[derive(Drop, starknet::Event)]
    struct TestEvent {
        address: ContractAddress,
    }

    #[external(v0)]
    fn test(value: felt252) -> value {
        value
    }

            #[storage]
            struct Storage {
                world_dispatcher: IWorldDispatcher,
                #[substorage(v0)]
                upgradeable: dojo::components::upgradeable::upgradeable::Storage,
            }
impl EventDrop of Drop::<Event>;
impl TestEventDrop of Drop::<TestEvent>;
            
                }
