//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use array::ArrayTrait;
use dojo::query::Caller;
use dojo::query::Query;
use dojo::query::EntityID;
use dojo::query::With;

#[derive(Component)]
struct Position {
    x: felt,
    y: felt,
}

#[derive(Component)]
struct Player {
    name: felt, 
}

fn move_inner(query: Query<(Position, Option::<Player>)>, index: u32, count: u32) {
    return move_inner(query, index + 1_u32, count - 1_u32);
}

#[system]
fn move(positions_query: Query<(Position, Option::<Player>)>, player_query: Query<(With::<Player, EntityID<Caller>>)>) {
    let mut bar = 123;
    let mut foo = ArrayTrait::<felt>::new();
    // TODO: https://github.com/starkware-libs/cairo/issues/2438
    // foo.append(bar);

    // TODO: Replace with query.len().
    // https://github.com/starkware-libs/cairo/issues/2438
    move_inner(positions_query, 0_u32, 1_u32);

    if bar == 123 {
        return ();
    } else if bar == 0 {
        return ();
    } else {
        return ();
    }
}

//! > generated_cairo_code
use array::ArrayTrait;

use dojo::query::Caller;

use dojo::query::Query;

use dojo::query::EntityID;

use dojo::query::With;

fn move_inner(query: Query<(Position, Option::<Player>)>, index: u32, count: u32) {
    return move_inner(query, index + 1_u32, count - 1_u32);
}

#[derive(Copy, Drop)]
struct Position {
    x: felt,
    y: felt,
}

impl PositionSerde of serde::Serde::<Position> {
    fn serialize(ref serialized: Array::<felt>, input: Position) {
        serde::Serde::<felt>::serialize(ref serialized, input.x);
        serde::Serde::<felt>::serialize(ref serialized, input.y);
    }
    fn deserialize(ref serialized: Span::<felt>) -> Option::<Position> {
        Option::Some(
            Position {
                x: serde::Serde::<felt>::deserialize(ref serialized)?,
                y: serde::Serde::<felt>::deserialize(ref serialized)?,
            }
        )
    }
}

impl StorageAccessPosition of starknet::StorageAccess::<Position> {
    fn read(
        address_domain: felt, base: starknet::StorageBaseAddress
    ) -> starknet::SyscallResult::<Position> {
        Result::Ok(
            Position {
                x: starknet::storage_read_syscall(
                    address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                )?,
                y: starknet::storage_read_syscall(
                    address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8)
                )?,
            }
        )
    }
    fn write(
        address_domain: felt, base: starknet::StorageBaseAddress, value: Position
    ) -> starknet::SyscallResult::<()> {
        starknet::storage_write_syscall(
            address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.x
        )?;
        starknet::storage_write_syscall(
            address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8), value.y
        )
    }
}

#[derive(Copy, Drop)]
struct Player {
    name: felt, 
}

impl PlayerSerde of serde::Serde::<Player> {
    fn serialize(ref serialized: Array::<felt>, input: Player) {
        serde::Serde::<felt>::serialize(ref serialized, input.name);
    }
    fn deserialize(ref serialized: Span::<felt>) -> Option::<Player> {
        Option::Some(Player { name: serde::Serde::<felt>::deserialize(ref serialized)?,  })
    }
}

impl StorageAccessPlayer of starknet::StorageAccess::<Player> {
    fn read(
        address_domain: felt, base: starknet::StorageBaseAddress
    ) -> starknet::SyscallResult::<Player> {
        Result::Ok(
            Player {
                name: starknet::storage_read_syscall(
                    address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                )?,
            }
        )
    }
    fn write(
        address_domain: felt, base: starknet::StorageBaseAddress, value: Player
    ) -> starknet::SyscallResult::<()> {
        starknet::storage_write_syscall(
            address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.name
        )
    }
}

#[contract]
mod MoveSystem {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;
    use dojo::query::QueryTrait;
    use super::With;
    use super::Position;
    use super::Query;
    use super::Player;
    use super::EntityID;
    use super::Caller;


    #[external]
    fn execute() {
        let world_address = starknet::contract_address_const::<0x0>();

        let positions_query = QueryTrait::<(Position, Option::<Player>)>::new();
        let player_query = QueryTrait::<(With::<Player, EntityID<Caller>>)>::new();
        let mut bar = 123;

        let mut foo = super::ArrayTrait::<felt>::new();

        super::move_inner(positions_query, 0_u32, 1_u32);
        if bar == 123 {
            return ();
        } else {
            if bar == 0 {
                return ();
            } else {
                return ();
            }
        }
    }
}

#[contract]
mod PositionComponent {
    use super::Position;
    use super::PositionSerde;
    use super::StorageAccessPosition;

    struct Storage {
        state: LegacyMap::<felt, Position>, 
    }

    // Initialize Position.
    #[external]
    fn initialize() {}

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Position) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Position {
        return state::read(entity_id);
    }
}

#[contract]
mod PlayerComponent {
    use super::Player;
    use super::PlayerSerde;
    use super::StorageAccessPlayer;

    struct Storage {
        state: LegacyMap::<felt, Player>, 
    }

    // Initialize Player.
    #[external]
    fn initialize() {}

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Player) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Player {
        return state::read(entity_id);
    }
}

//! > expected_diagnostics
error: Variable not dropped.
 --> contract:22:33
                            let player_query = QueryTrait::<(With::<Player, EntityID<Caller>>)>::new();
                                ^**********^
