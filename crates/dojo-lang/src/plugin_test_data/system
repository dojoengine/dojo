//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
extern type Query<T>;

#[derive(Component)]
struct Position {
    x: felt,
    y: felt,
}

#[derive(Component)]
struct Health {
    hp: felt, 
}

#[system]
mod MoveSystem {
    fn execute_inner(query: Query<(Position, Option::<Health>)>) {
        return ();
    }

    fn execute(query: Query<(Position, Option::<Health>)>) {
        return ();
    }
}

//! > generated_cairo_code
extern type Query<T>;

#[contract]
mod MoveSystem {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;

    fn execute_inner(query: Query<(Position, Option::<Health>)>) {
        return ();
    }
    struct Storage {}

    #[external]
    fn execute() {
        let world_address = starknet::contract_address_const::<0x0>();
        let position_ids = IWorldDispatcher {
            contract_address: world_address
        }.entities(
            starknet::contract_address_const::<0x3718a0ff90de39b4acf137c1a27b0427c2c3f60c23c4f7c20b85c578d2c5897>()
        );
        let health_ids = IWorldDispatcher {
            contract_address: world_address
        }.entities(
            starknet::contract_address_const::<0x1690bb282da6a011c52715e2188378c769966964ca2332dccad8d7542983bc2>()
        );

        return ();
    }
}

#[contract]
mod PositionComponent {
    #[derive(Copy, Drop)]
    struct Position {
        x: felt,
        y: felt,
    }

    impl PositionSerde of serde::Serde::<Position> {
        fn serialize(ref serialized: Array::<felt>, input: Position) {
            serde::Serde::<felt>::serialize(ref serialized, input.x);
            serde::Serde::<felt>::serialize(ref serialized, input.y);
        }
        fn deserialize(ref serialized: Span::<felt>) -> Option::<Position> {
            Option::Some(
                Position {
                    x: serde::Serde::<felt>::deserialize(ref serialized)?,
                    y: serde::Serde::<felt>::deserialize(ref serialized)?,
                }
            )
        }
    }

    impl StorageAccessPosition of starknet::StorageAccess::<Position> {
        fn read(
            address_domain: felt, base: starknet::StorageBaseAddress
        ) -> starknet::SyscallResult::<Position> {
            Result::Ok(
                Position {
                    x: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                    )?,
                    y: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8)
                    )?,
                }
            )
        }
        fn write(
            address_domain: felt, base: starknet::StorageBaseAddress, value: Position
        ) -> starknet::SyscallResult::<()> {
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.x
            )?;
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8), value.y
            )
        }
    }


    struct Storage {
        state: LegacyMap::<felt, Position>, 
    }

    // Initialize Position.
    #[external]
    fn initialize() {}

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Position) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Position {
        return state::read(entity_id);
    }
}

#[contract]
mod HealthComponent {
    #[derive(Copy, Drop)]
    struct Health {
        hp: felt, 
    }

    impl HealthSerde of serde::Serde::<Health> {
        fn serialize(ref serialized: Array::<felt>, input: Health) {
            serde::Serde::<felt>::serialize(ref serialized, input.hp);
        }
        fn deserialize(ref serialized: Span::<felt>) -> Option::<Health> {
            Option::Some(Health { hp: serde::Serde::<felt>::deserialize(ref serialized)?,  })
        }
    }

    impl StorageAccessHealth of starknet::StorageAccess::<Health> {
        fn read(
            address_domain: felt, base: starknet::StorageBaseAddress
        ) -> starknet::SyscallResult::<Health> {
            Result::Ok(
                Health {
                    hp: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                    )?,
                }
            )
        }
        fn write(
            address_domain: felt, base: starknet::StorageBaseAddress, value: Health
        ) -> starknet::SyscallResult::<()> {
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.hp
            )
        }
    }


    struct Storage {
        state: LegacyMap::<felt, Health>, 
    }

    // Initialize Health.
    #[external]
    fn initialize() {}

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Health) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Health {
        return state::read(entity_id);
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Type not found.
 --> MoveSystem:7:33
        fn execute_inner(query: Query<(Position, Option::<Health>)>) {
                                ^***^
