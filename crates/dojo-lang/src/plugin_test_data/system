//! > Test expansion of the #[system].

//! > test_runner_name
test_expand_plugin

//! > cairo_code
#[dojo::contract(namespace: "My@Namespace")]
mod bad_namespace_format {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract(namespace: 'my_namespace')]
mod spawn {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract(namespace: "my_namespace")]
mod proxy {
    fn execute(value: felt252) -> felt252 {
        value
    }
}

#[dojo::contract]
mod ctxnamed {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx2: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract]
mod withevent {
    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        TestEvent: TestEvent,
    }

    #[derive(Drop, starknet::Event)]
    struct TestEvent {
        address: ContractAddress,
    }
}

#[starknet::component]
mod testcomponent1 {
    #[storage]
    struct Storage {}
}

#[starknet::component]
mod testcomponent2 {
    #[storage]
    struct Storage {}
}

#[dojo::contract]
mod withcomponent {
    component!(path: testcomponent1, storage: testcomponent1_storage, event: testcomponent1_event);
    component!(path: testcomponent2, storage: testcomponent2_storage, event: testcomponent2_event);

    #[storage]
    struct Storage {
        #[substorage(v0)]
        testcomponent1_storage: testcomponent1::Storage,
        #[substorage(v0)]
        testcomponent2_storage: testcomponent2::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        #[flat]
        testcomponent1_event: testcomponent1::Event,
        testcomponent2_event: testcomponent2::Event,
    }
}
#[dojo::interface]
trait IEmptyTrait;

#[dojo::interface]
trait IFaultyTrait {
    const ONE: u8;

    #[my_attr]
    fn do_with_attrs(p1: u8) -> u16;
}

#[dojo::interface]
trait INominalTrait {
    fn do_no_param() -> felt252;
    fn do_no_param_but_world(world: @IWorldDispatcher) -> felt252;
    fn do_no_param_but_world_ref(ref world: IWorldDispatcher) -> felt252;
    fn do_params_no_world(p1: felt252, p2: u8) -> felt252;
    fn do_params_and_world(world: @IWorldDispatcher, p2: u8) -> felt252;
    fn do_params_and_world_ref(ref world: IWorldDispatcher, p2: u8) -> felt252;

    fn do_with_self(self: @ContractState) -> felt252;
    fn do_with_ref_self(ref self: ContractState) -> felt252;
}

#[dojo::interface]
trait IFaultyTrait {
    fn do_with_self_and_world(self: @ContractState, world: @IWorldDispatcher) -> felt252;
    fn do_with_ref_self_and_world(ref self: ContractState, ref world: IWorldDispatcher) -> felt252;
    fn do_with_self_and_world_inv(world: @IWorldDispatcher, self: @ContractState) -> felt252;
    fn do_with_ref_self_and_world_inv(
        ref world: IWorldDispatcher, ref self: ContractState
    ) -> felt252;
    fn do_with_several_world_dispatchers(
        world: @IWorldDispatcher, vec: Vec2, ref another_world: IWorldDispatcher
    ) -> felt252;
    fn do_with_world_not_named_world(another_world: @IWorldDispatcher) -> felt252;
    fn do_with_world_not_first(vec: Vec2, ref world: IWorldDispatcher) -> felt252;
}

#[dojo::contract]
mod MyFaultyContract {
    #[abi(embed_v0)]
    impl TestFaultyImpl of IFaultyTrait<ContractState> {
        fn do_with_self_and_world(self: @ContractState, world: @IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_with_ref_self_and_world(
            ref self: ContractState, ref world: IWorldDispatcher
        ) -> felt252 {
            'land'
        }

        fn do_with_self_and_world_inv(world: @IWorldDispatcher, self: @ContractState) -> felt252 {
            'land'
        }

        fn do_with_ref_self_and_world_inv(
            ref world: IWorldDispatcher, ref self: ContractState
        ) -> felt252 {
            'land'
        }

        fn do_with_several_world_dispatchers(
            world: @IWorldDispatcher, vec: Vec2, ref another_world: IWorldDispatcher
        ) -> felt252 {
            'land'
        }

        fn do_with_world_not_named_world(another_world: @IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_with_world_not_first(vec: Vec2, ref world: IWorldDispatcher) -> felt252 {
            'land'
        }
    }

    #[generate_trait]
    impl InternalImplBad of InternalUtils<ContractState> {
        fn bad_func_using_generate(world: @IWorldDispatcher) -> felt252 {
            'land'
        }
    }
}

#[dojo::contract]
mod MyNominalContract {
    #[derive(Drop)]
    struct Action {
        damage: u8
    }

    #[abi(embed_v0)]
    impl TestNominalImpl of INominalTrait<ContractState> {
        fn do_no_param() -> felt252 {
            'land'
        }

        fn do_no_param_but_world(world: @IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_no_param_but_world_ref(ref world: IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_params_no_world(p1: felt252, p2: u8) -> felt252 {
            'land'
        }

        fn do_params_and_world(world: @IWorldDispatcher, p2: u8) -> felt252 {
            'land'
        }

        fn do_params_and_world_ref(ref world: IWorldDispatcher, p2: u8) -> felt252 {
            'land'
        }

        fn do_with_self(self: @ContractState) -> felt252 {
            'land'
        }

        fn do_with_ref_self(ref self: ContractState) -> felt252 {
            'land'
        }
    }

    #[generate_trait]
    impl ImplInternalNoContractState of InternalNoContractState {
        fn func1(world: IWorldDispatcher) -> felt252 {
            let _w = world;
            42
        }
    }
}

#[dojo::contract]
mod init_test {
    fn dojo_init(
        world: IWorldDispatcher,
        actions_address: ContractAddress,
        actions_class: ClassHash,
        value: u8
    ) {
        emit!(
            world,
            ContractInitialized {
                contract_address: actions_address, contract_class: actions_class, value
            }
        );
    }
}

#[dojo::contract]
mod no_init_test {}

//! > generated_cairo_code
#[starknet::contract]
mod spawn {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;

    #[storage]
    struct Storage {
        world_dispatcher: IWorldDispatcher,
    }

    #[abi(embed_v0)]
    fn name(self: @ContractState) -> felt252 {
        'spawn'
    }

    #[abi(embed_v0)]
    impl Upgradeable of dojo::upgradable::IUpgradeable<ContractState> {
        fn upgrade(ref self: ContractState, new_class_hash: starknet::ClassHash) {
            let caller = starknet::get_caller_address();
            assert(
                self.world_dispatcher.read().contract_address == caller, 'only World can upgrade'
            );
            dojo::upgradable::UpgradeableTrait::upgrade(new_class_hash);
        }
    }

    use traits::Into;
    use dojo::world::Context;

    #[abi(embed_v0)]
    fn execute(self: @ContractState, ctx: Context, name: felt252) {
        return ();
    }
}


#[starknet::contract]
mod proxy {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;

    #[storage]
    struct Storage {
        world_dispatcher: IWorldDispatcher,
    }

    #[abi(embed_v0)]
    fn name(self: @ContractState) -> felt252 {
        'proxy'
    }

    #[abi(embed_v0)]
    impl Upgradeable of dojo::upgradable::IUpgradeable<ContractState> {
        fn upgrade(ref self: ContractState, new_class_hash: starknet::ClassHash) {
            let caller = starknet::get_caller_address();
            assert(
                self.world_dispatcher.read().contract_address == caller, 'only World can upgrade'
            );
            dojo::upgradable::UpgradeableTrait::upgrade(new_class_hash);
        }
    }


    #[abi(embed_v0)]
    fn execute(self: @ContractState, value: felt252) -> felt252 {
        value
    }
}


#[starknet::contract]
mod ctxnamed {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;

    #[storage]
    struct Storage {
        world_dispatcher: IWorldDispatcher,
    }

    #[abi(embed_v0)]
    fn name(self: @ContractState) -> felt252 {
        'ctxnamed'
    }

    #[abi(embed_v0)]
    impl Upgradeable of dojo::upgradable::IUpgradeable<ContractState> {
        fn upgrade(ref self: ContractState, new_class_hash: starknet::ClassHash) {
            let caller = starknet::get_caller_address();
            assert(
                self.world_dispatcher.read().contract_address == caller, 'only World can upgrade'
            );
            dojo::upgradable::UpgradeableTrait::upgrade(new_class_hash);
        }
    }

    use traits::Into;
    use dojo::world::Context;

    #[abi(embed_v0)]
    fn execute(self: @ContractState, ctx2: Context, name: felt252) {
        return ();
    }
}

//! > expected_diagnostics
error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:1:1
#[dojo::contract(namespace: "My@Namespace")]
^******************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:11:1
#[dojo::contract(namespace: 'my_namespace')]
^******************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:21:1
#[dojo::contract(namespace: "my_namespace")]
^******************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:28:1
#[dojo::contract]
^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:38:1
#[dojo::contract]
^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:52:1
#[starknet::component]
^********************^

error: Unsupported attribute.
 --> test_src/lib.cairo:52:1
#[starknet::component]
^********************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:58:1
#[starknet::component]
^********************^

error: Unsupported attribute.
 --> test_src/lib.cairo:58:1
#[starknet::component]
^********************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:64:1
#[dojo::contract]
^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:85:1
#[dojo::interface]
^****************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:88:1
#[dojo::interface]
^****************^

error: Unsupported attribute.
 --> test_src/lib.cairo:92:5
    #[my_attr]
    ^********^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:96:1
#[dojo::interface]
^****************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:109:1
#[dojo::interface]
^****************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:124:1
#[dojo::contract]
^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:171:1
#[dojo::contract]
^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:222:1
#[dojo::contract]
^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:239:1
#[dojo::contract]
^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:3:5
    use traits::Into;
    ^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:4:5
    use dojo::world::Context;
    ^***********************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:6:5
    fn execute(ctx: Context, name: felt252) {
    ^***************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:13:5
    use traits::Into;
    ^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:14:5
    use dojo::world::Context;
    ^***********************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:16:5
    fn execute(ctx: Context, name: felt252) {
    ^***************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:23:5
    fn execute(value: felt252) -> felt252 {
    ^*************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:30:5
    use traits::Into;
    ^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:31:5
    use dojo::world::Context;
    ^***********************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:33:5
    fn execute(ctx2: Context, name: felt252) {
    ^****************************************^

error: Unknown derive `starknet::Event` - a plugin might be missing.
 --> test_src/lib.cairo:41:20
    #[derive(Drop, starknet::Event)]
                   ^*************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:40:5
    #[event]
    ^******^

error: Unsupported attribute.
 --> test_src/lib.cairo:40:5
    #[event]
    ^******^

error: Unknown derive `starknet::Event` - a plugin might be missing.
 --> test_src/lib.cairo:46:20
    #[derive(Drop, starknet::Event)]
                   ^*************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:46:5
    #[derive(Drop, starknet::Event)]
    ^******************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:40:1
    #[event]
^**********^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:45:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:54:5
    #[storage]
    ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo:54:5
    #[storage]
    ^********^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:60:5
    #[storage]
    ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo:60:5
    #[storage]
    ^********^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:66:5
    component!(path: testcomponent1, storage: testcomponent1_storage, event: testcomponent1_event);
    ^*********************************************************************************************^

error: Unknown inline item macro: 'component'.
 --> test_src/lib.cairo:66:5
    component!(path: testcomponent1, storage: testcomponent1_storage, event: testcomponent1_event);
    ^*********************************************************************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:67:5
    component!(path: testcomponent2, storage: testcomponent2_storage, event: testcomponent2_event);
    ^*********************************************************************************************^

error: Unknown inline item macro: 'component'.
 --> test_src/lib.cairo:67:5
    component!(path: testcomponent2, storage: testcomponent2_storage, event: testcomponent2_event);
    ^*********************************************************************************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:69:5
    #[storage]
    ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo:69:5
    #[storage]
    ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo:71:9
        #[substorage(v0)]
        ^***************^

error: Unsupported attribute.
 --> test_src/lib.cairo:73:9
        #[substorage(v0)]
        ^***************^

error: Unknown derive `starknet::Event` - a plugin might be missing.
 --> test_src/lib.cairo:78:20
    #[derive(Drop, starknet::Event)]
                   ^*************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:77:5
    #[event]
    ^******^

error: Unsupported attribute.
 --> test_src/lib.cairo:77:5
    #[event]
    ^******^

error: Unsupported attribute.
 --> test_src/lib.cairo:80:9
        #[flat]
        ^*****^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:76:1

^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:126:5
    #[abi(embed_v0)]
    ^**************^

error: Unsupported attribute.
 --> test_src/lib.cairo:126:5
    #[abi(embed_v0)]
    ^**************^

error: Generated trait must have generic args matching the impl's generic params.
 --> test_src/lib.cairo:164:29
    impl InternalImplBad of InternalUtils<ContractState> {
                            ^**************************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:163:5
    #[generate_trait]
    ^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:163:5
    #[generate_trait]
    ^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:173:5
    #[derive(Drop)]
    ^*************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:178:5
    #[abi(embed_v0)]
    ^**************^

error: Unsupported attribute.
 --> test_src/lib.cairo:178:5
    #[abi(embed_v0)]
    ^**************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:213:5
    #[generate_trait]
    ^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:173:1
    #[derive(Drop)]
^*****************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:213:5
    #[generate_trait]
    ^***************^

error: Namespace configuration expected at tool.dojo.world.namespace, but not found or invalid: Real("test_src").
 --> test_src/lib.cairo:224:5
    fn dojo_init(
    ^***********^

//! > expanded_cairo_code
#[dojo::contract(namespace: "My@Namespace")]
mod bad_namespace_format {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract(namespace: 'my_namespace')]
mod spawn {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract(namespace: "my_namespace")]
mod proxy {
    fn execute(value: felt252) -> felt252 {
        value
    }
}

#[dojo::contract]
mod ctxnamed {
    use traits::Into;
    use dojo::world::Context;

    fn execute(ctx2: Context, name: felt252) {
        return ();
    }
}

#[dojo::contract]
mod withevent {
    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        TestEvent: TestEvent,
    }

    #[derive(Drop, starknet::Event)]
    struct TestEvent {
        address: ContractAddress,
    }
impl EventDrop of core::traits::Drop::<Event>;
impl TestEventDrop of core::traits::Drop::<TestEvent>;
}

#[starknet::component]
mod testcomponent1 {
    #[storage]
    struct Storage {}
}

#[starknet::component]
mod testcomponent2 {
    #[storage]
    struct Storage {}
}

#[dojo::contract]
mod withcomponent {

    #[storage]
    struct Storage {
        #[substorage(v0)]
        testcomponent1_storage: testcomponent1::Storage,
        #[substorage(v0)]
        testcomponent2_storage: testcomponent2::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        #[flat]
        testcomponent1_event: testcomponent1::Event,
        testcomponent2_event: testcomponent2::Event,
    }
impl EventDrop of core::traits::Drop::<Event>;
}
#[dojo::interface]
trait IEmptyTrait;

#[dojo::interface]
trait IFaultyTrait {
    const ONE: u8;

    #[my_attr]
    fn do_with_attrs(p1: u8) -> u16;
}

#[dojo::interface]
trait INominalTrait {
    fn do_no_param() -> felt252;
    fn do_no_param_but_world(world: @IWorldDispatcher) -> felt252;
    fn do_no_param_but_world_ref(ref world: IWorldDispatcher) -> felt252;
    fn do_params_no_world(p1: felt252, p2: u8) -> felt252;
    fn do_params_and_world(world: @IWorldDispatcher, p2: u8) -> felt252;
    fn do_params_and_world_ref(ref world: IWorldDispatcher, p2: u8) -> felt252;

    fn do_with_self(self: @ContractState) -> felt252;
    fn do_with_ref_self(ref self: ContractState) -> felt252;
}

#[dojo::interface]
trait IFaultyTrait {
    fn do_with_self_and_world(self: @ContractState, world: @IWorldDispatcher) -> felt252;
    fn do_with_ref_self_and_world(ref self: ContractState, ref world: IWorldDispatcher) -> felt252;
    fn do_with_self_and_world_inv(world: @IWorldDispatcher, self: @ContractState) -> felt252;
    fn do_with_ref_self_and_world_inv(
        ref world: IWorldDispatcher, ref self: ContractState
    ) -> felt252;
    fn do_with_several_world_dispatchers(
        world: @IWorldDispatcher, vec: Vec2, ref another_world: IWorldDispatcher
    ) -> felt252;
    fn do_with_world_not_named_world(another_world: @IWorldDispatcher) -> felt252;
    fn do_with_world_not_first(vec: Vec2, ref world: IWorldDispatcher) -> felt252;
}

#[dojo::contract]
mod MyFaultyContract {
    #[abi(embed_v0)]
    impl TestFaultyImpl of IFaultyTrait<ContractState> {
        fn do_with_self_and_world(self: @ContractState, world: @IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_with_ref_self_and_world(
            ref self: ContractState, ref world: IWorldDispatcher
        ) -> felt252 {
            'land'
        }

        fn do_with_self_and_world_inv(world: @IWorldDispatcher, self: @ContractState) -> felt252 {
            'land'
        }

        fn do_with_ref_self_and_world_inv(
            ref world: IWorldDispatcher, ref self: ContractState
        ) -> felt252 {
            'land'
        }

        fn do_with_several_world_dispatchers(
            world: @IWorldDispatcher, vec: Vec2, ref another_world: IWorldDispatcher
        ) -> felt252 {
            'land'
        }

        fn do_with_world_not_named_world(another_world: @IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_with_world_not_first(vec: Vec2, ref world: IWorldDispatcher) -> felt252 {
            'land'
        }
    }

    #[generate_trait]
    impl InternalImplBad of InternalUtils<ContractState> {
        fn bad_func_using_generate(world: @IWorldDispatcher) -> felt252 {
            'land'
        }
    }
    trait InternalUtils{
        fn bad_func_using_generate(world: @IWorldDispatcher) -> felt252;
    }
}

#[dojo::contract]
mod MyNominalContract {
    #[derive(Drop)]
    struct Action {
        damage: u8
    }

    #[abi(embed_v0)]
    impl TestNominalImpl of INominalTrait<ContractState> {
        fn do_no_param() -> felt252 {
            'land'
        }

        fn do_no_param_but_world(world: @IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_no_param_but_world_ref(ref world: IWorldDispatcher) -> felt252 {
            'land'
        }

        fn do_params_no_world(p1: felt252, p2: u8) -> felt252 {
            'land'
        }

        fn do_params_and_world(world: @IWorldDispatcher, p2: u8) -> felt252 {
            'land'
        }

        fn do_params_and_world_ref(ref world: IWorldDispatcher, p2: u8) -> felt252 {
            'land'
        }

        fn do_with_self(self: @ContractState) -> felt252 {
            'land'
        }

        fn do_with_ref_self(ref self: ContractState) -> felt252 {
            'land'
        }
    }

    #[generate_trait]
    impl ImplInternalNoContractState of InternalNoContractState {
        fn func1(world: IWorldDispatcher) -> felt252 {
            let _w = world;
            42
        }
    }
impl ActionDrop of core::traits::Drop::<Action>;
    trait InternalNoContractState {
        fn func1(world: IWorldDispatcher) -> felt252;
    }
}

#[dojo::contract]
mod init_test {
    fn dojo_init(
        world: IWorldDispatcher,
        actions_address: ContractAddress,
        actions_class: ClassHash,
        value: u8
    ) {
        emit!(
            world,
            ContractInitialized {
                contract_address: actions_address, contract_class: actions_class, value
            }
        );
    }
}

#[dojo::contract]
mod no_init_test {}
