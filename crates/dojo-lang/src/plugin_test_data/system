//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use array::ArrayTrait;
use serde::Serde;

#[derive(Component)]
struct Position {
    x: felt252,
    y: felt252,
}

#[derive(Component)]
struct Player {
    name: felt252, 
}

#[system]
mod SpawnSystem {
    use array::ArrayTrait;
    use traits::Into;   
    use starknet::contract_address::ContractAddressIntoFelt252;

    use super::Position;
    use super::Player;

    fn execute(name: felt252) {
        let uuid = commands::uuid();
        let player = commands::create((420, (69, uuid)).into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        let literal = commands::create(420.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        let player_id = starknet::get_caller_address();
        let player = commands::create(player_id.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        let invalid_args = commands::create((
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        let invalid_path = commands::create((0, 0, 0, 0, 0), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));
        return ();
    }
}

#[system]
mod MoveSystem {
    use traits::Into;
    use array::ArrayTrait;
    use dojo::query::Query;
    use super::Position;
    use super::Player;

    fn move_inner(positions: @Array<usize>, index: u32, count: u32) {
        return move_inner(positions, index + 1_u32, count - 1_u32);
    }

    fn execute(player_id: felt252) {
        let positions_query = commands::<(Position, Player)>::all();
        let players_query = commands::<Player>::all();
        let player = commands::<Player>::get(player_id.into());
        let player_position = commands::<(Position, Player)>::get(player_id.into());

        let mut bar = 123;
        let mut foo = ArrayTrait::<felt252>::new();
        foo.append(bar);

        let mut calldata = ArrayTrait::new();
        calldata.append('name');
        commands::execute(SpawnSystem, calldata.span());

        move_inner(@positions_query, 0_u32, positions_query.len());

        if bar == 123 {
            return ();
        } else if bar == 0 {
            return ();
        } else {
            return ();
        }
    }
}

//! > generated_cairo_code
use array::ArrayTrait;

use serde::Serde;

#[derive(Copy, Drop)]
struct Position {
    x: felt252,
    y: felt252,
}

#[abi]
trait IPosition {
    fn name() -> felt252;
    fn len() -> u8;
    fn serialize(raw: Span<felt252>) -> Position;
    fn deserialize(value: Position) -> Span<felt252>;
}

impl PositionSerde of serde::Serde::<Position> {
    fn serialize(ref serialized: Array::<felt252>, input: Position) {
        serde::Serde::<felt252>::serialize(ref serialized, input.x);
        serde::Serde::<felt252>::serialize(ref serialized, input.y);
    }
    fn deserialize(ref serialized: Span::<felt252>) -> Option::<Position> {
        Option::Some(
            Position {
                x: serde::Serde::<felt252>::deserialize(ref serialized)?,
                y: serde::Serde::<felt252>::deserialize(ref serialized)?,
            }
        )
    }
}

#[contract]
mod PositionComponent {
    use array::ArrayTrait;
    use option::OptionTrait;
    use dojo::serde::SpanSerde;
    use super::Position;

    #[view]
    fn name() -> felt252 {
        'Position'
    }

    #[view]
    fn len() -> usize {
        2_usize
    }

    // Serialize an entity.
    #[view]
    fn serialize(mut raw: Span<felt252>) -> Position {
        serde::Serde::<Position>::deserialize(ref raw).unwrap()
    }

    // Get the state of an entity.
    #[view]
    #[raw_output]
    fn deserialize(value: Position) -> Span<felt252> {
        let mut arr = ArrayTrait::new();
        serde::Serde::<Position>::serialize(ref arr, value);
        arr.span()
    }
}

#[derive(Copy, Drop)]
struct Player {
    name: felt252, 
}

#[abi]
trait IPlayer {
    fn name() -> felt252;
    fn len() -> u8;
    fn serialize(raw: Span<felt252>) -> Player;
    fn deserialize(value: Player) -> Span<felt252>;
}

impl PlayerSerde of serde::Serde::<Player> {
    fn serialize(ref serialized: Array::<felt252>, input: Player) {
        serde::Serde::<felt252>::serialize(ref serialized, input.name);
    }
    fn deserialize(ref serialized: Span::<felt252>) -> Option::<Player> {
        Option::Some(Player { name: serde::Serde::<felt252>::deserialize(ref serialized)?,  })
    }
}

#[contract]
mod PlayerComponent {
    use array::ArrayTrait;
    use option::OptionTrait;
    use dojo::serde::SpanSerde;
    use super::Player;

    #[view]
    fn name() -> felt252 {
        'Player'
    }

    #[view]
    fn len() -> usize {
        1_usize
    }

    // Serialize an entity.
    #[view]
    fn serialize(mut raw: Span<felt252>) -> Player {
        serde::Serde::<Player>::deserialize(ref raw).unwrap()
    }

    // Get the state of an entity.
    #[view]
    #[raw_output]
    fn deserialize(value: Player) -> Span<felt252> {
        let mut arr = ArrayTrait::new();
        serde::Serde::<Player>::serialize(ref arr, value);
        arr.span()
    }
}

#[contract]
mod SpawnSystem {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;
    use dojo::storage::StorageKey;
    use dojo::storage::StorageKeyTrait;
    use dojo::storage::Felt252IntoStorageKey;
    use dojo::storage::TupleSize1IntoStorageKey;
    use dojo::storage::TupleSize2IntoStorageKey;
    use dojo::storage::TupleSize3IntoStorageKey;
    use dojo::storage::TupleSize1IntoPartitionedStorageKey;
    use dojo::storage::TupleSize2IntoPartitionedStorageKey;
    use dojo::storage::ContractAddressIntoStorageKey;

    #[view]
    fn name() -> felt252 {
        'SpawnSystem'
    }

    use array::ArrayTrait;
    use traits::Into;
    use starknet::contract_address::ContractAddressIntoFelt252;

    use super::Position;
    use super::Player;

    #[external]
    fn execute(world_address: starknet::ContractAddress, name: felt252) {
        let uuid = IWorldDispatcher { contract_address: world_address }.uuid();

        let mut __player_calldata = ArrayTrait::new();
        serde::Serde::<Player>::serialize(ref __player_calldata, Player { name: name });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Player', (420, (69, uuid)).into(), 0_u8, __player_calldata.span());

        let mut __player_calldata = ArrayTrait::new();
        serde::Serde::<Position>::serialize(ref __player_calldata, Position { x: 0, y: 0 });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Position', (420, (69, uuid)).into(), 0_u8, __player_calldata.span());

        let mut __literal_calldata = ArrayTrait::new();
        serde::Serde::<Player>::serialize(ref __literal_calldata, Player { name: name });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Player', 420.into(), 0_u8, __literal_calldata.span());

        let mut __literal_calldata = ArrayTrait::new();
        serde::Serde::<Position>::serialize(ref __literal_calldata, Position { x: 0, y: 0 });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Position', 420.into(), 0_u8, __literal_calldata.span());

        let player_id = starknet::get_caller_address();

        let mut __player_calldata = ArrayTrait::new();
        serde::Serde::<Player>::serialize(ref __player_calldata, Player { name: name });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Player', player_id.into(), 0_u8, __player_calldata.span());

        let mut __player_calldata = ArrayTrait::new();
        serde::Serde::<Position>::serialize(ref __player_calldata, Position { x: 0, y: 0 });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Position', player_id.into(), 0_u8, __player_calldata.span());

        let mut __invalid_path_calldata = ArrayTrait::new();
        serde::Serde::<Player>::serialize(ref __invalid_path_calldata, Player { name: name });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Player', (0, 0, 0, 0, 0), 0_u8, __invalid_path_calldata.span());

        let mut __invalid_path_calldata = ArrayTrait::new();
        serde::Serde::<Position>::serialize(ref __invalid_path_calldata, Position { x: 0, y: 0 });
        IWorldDispatcher {
            contract_address: world_address
        }.set('Position', (0, 0, 0, 0, 0), 0_u8, __invalid_path_calldata.span());
        return ();
    }
}

#[contract]
mod MoveSystem {
    use dojo::world;
    use dojo::world::IWorldDispatcher;
    use dojo::world::IWorldDispatcherTrait;
    use dojo::storage::StorageKey;
    use dojo::storage::StorageKeyTrait;
    use dojo::storage::Felt252IntoStorageKey;
    use dojo::storage::TupleSize1IntoStorageKey;
    use dojo::storage::TupleSize2IntoStorageKey;
    use dojo::storage::TupleSize3IntoStorageKey;
    use dojo::storage::TupleSize1IntoPartitionedStorageKey;
    use dojo::storage::TupleSize2IntoPartitionedStorageKey;
    use dojo::storage::ContractAddressIntoStorageKey;

    #[view]
    fn name() -> felt252 {
        'MoveSystem'
    }

    use traits::Into;
    use array::ArrayTrait;
    use dojo::query::Query;
    use super::Position;
    use super::Player;

    fn move_inner(positions: @Array<usize>, index: u32, count: u32) {
        return move_inner(positions, index + 1_u32, count - 1_u32);
    }

    #[external]
    fn execute(world_address: starknet::ContractAddress, player_id: felt252) {
        let positions_query = ArrayTrait::<usize>::new();
        let __positions_query_position_ids = IWorldDispatcher {
            contract_address: world_address
        }.all('Position', 0);

        let __positions_query_player_ids = IWorldDispatcher {
            contract_address: world_address
        }.all('Player', 0);
        let players_query = ArrayTrait::<usize>::new();
        let __players_query_player_ids = IWorldDispatcher {
            contract_address: world_address
        }.all('Player', 0);

        let mut __player_player_raw = IWorldDispatcher {
            contract_address: world_address
        }.get('Player', player_id.into(), 0_u8, 0_usize);
        let __player_player = serde::Serde::<Player>::deserialize(ref __player_player_raw);
        let player = __player_player;

        let mut __player_position_position_raw = IWorldDispatcher {
            contract_address: world_address
        }.get('Position', player_id.into(), 0_u8, 0_usize);
        let __player_position_position = serde::Serde::<Position>::deserialize(
            ref __player_position_position_raw
        );

        let mut __player_position_player_raw = IWorldDispatcher {
            contract_address: world_address
        }.get('Player', player_id.into(), 0_u8, 0_usize);
        let __player_position_player = serde::Serde::<Player>::deserialize(
            ref __player_position_player_raw
        );
        let player_position = (__player_position_position, __player_position_player);

        let mut bar = 123;
        let mut foo = ArrayTrait::<felt252>::new();
        foo.append(bar);

        let mut calldata = ArrayTrait::new();
        calldata.append('name');
        IWorldDispatcher {
            contract_address: world_address
        }.execute('SpawnSystem', calldata.span());

        move_inner(@positions_query, 0_u32, positions_query.len());

        if bar == 123 {
            return ();
        } else if bar == 0 {
            return ();
        } else {
            return ();
        }
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "(storage_key, (components,))"
 --> lib.cairo:42:44
        let invalid_args = commands::create((
                                           ^^

error: Plugin diagnostic: Unexpected argument type. Expected: "dojo::storage::StorageKey", found: "(core::felt252, core::felt252, core::felt252, core::felt252, core::felt252)".
 --> SpawnSystem:61:88
                    IWorldDispatcher { contract_address: world_address }.set('Player', (0, 0, 0, 0, 0), 0_u8, __invalid_path_calldata.span());
                                                                                       ^*************^

error: Plugin diagnostic: Unexpected argument type. Expected: "dojo::storage::StorageKey", found: "(core::felt252, core::felt252, core::felt252, core::felt252, core::felt252)".
 --> SpawnSystem:65:90
                    IWorldDispatcher { contract_address: world_address }.set('Position', (0, 0, 0, 0, 0), 0_u8, __invalid_path_calldata.span());
                                                                                         ^*************^
