//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use array::ArrayTrait;
use serde::Serde;

#[derive(Component, Copy, Drop, Serde)]
struct Position {
    x: felt252,
    y: felt252,
}

#[derive(Component, Copy, Drop, Serde)]
#[component(indexed: true)]
struct Player {
    name: felt252, 
}

#[system]
mod Spawn {
    use traits::Into;
    use super::Position;
    use super::Player;

    fn execute(ctx: Context, name: felt252) {
        set !(ctx, (420, (69, ctx.world.uuid())).into_partitioned(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        set !(ctx, 420.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        set !(ctx, 120.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        let player_id = starknet::get_caller_address();
        set !(ctx, player_id.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        set !(ctx, (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        set !(ctx, (0, 0, 0, 0, 0), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        set !(ctx, 1337.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));
        return ();
    }
}

#[system]
mod Move {
    use traits::Into;
    use array::ArrayTrait;
    use super::Position;
    use super::Player;

    fn move_inner(positions: @Array<usize>, index: u32, count: u32) {
        return move_inner(positions, index + 1_u32, count - 1_u32);
    }

    fn execute(player_id: felt252) {
        let positions_query = find!(ctx, 0x0, (Position, Player));
        let players_query = find!(ctx, 0x0, Player);
        let player = get!(ctx, player_id.into(), Player);
        let player_position = get!(ctx, player_id.into(), (Position, Player));

        let mut bar = 123;
        let mut foo = ArrayTrait::<felt252>::new();
        foo.append(bar);

        if bar == 123 {
            let player_position = get!(ctx, player_id.into(), (Position, Player));
            if foo.len() > 0_u32 {
                let positions_query = find!(ctx, 0x0, (Position, Player));
            }
        } else if bar == 321 {
            let maybe_player = try_get!(ctx, player_id.into(), Player);
            let player = maybe_player.expect('not_found');
            let name = player.name;

            let positions_query = try_get!(ctx, player_id.into(), (Position, Player));
            match positions_query {
                Option::Some((position, player)) => {
                    // do nothing
                },
                Option::None(()) => {
                    // do nothing
                }
            }
        } else {
            let player_position = get!(ctx, player_id.into(), (Position, Player));
        }

        {
            let player_position = get!(ctx, player_id.into(), (Position, Player));
        }

        let foo_bar = Option::Some(1);
        match foo_bar {
            Option::Some(x) => {
                let bar = x;
                let player_position = get!(ctx, player_id.into(), (Position, Player));
                if bar == 123 {
                    let positions_query = find!(ctx, 0x0, (Position, Player));
                }
            },
            Option::None(()) => {
                let player_position = get!(ctx, player_id.into(), (Position, Player));
            }
        }

        let foo = match foo_bar {
            Option::Some(x) => {'foo'},
            Option::None(()) => 'bar',
        };

        let mut calldata = ArrayTrait::new();
        calldata.append('name');
        execute!(ctx, SpawnSystem, 'PositionPlayerWriter'.into(), calldata.span());

        // move_inner(@positions_query, 0_u32, positions_query.len());

        let err = get!(ctx, player_id.into(), ());

        let mut i = 0;
        loop {
            if i == 3 {
                break ();
            }
            let player_position = get!(ctx, player_id.into(), (Position, Player));
            i+=0;
        };

        if bar == 123 {
            return ();
        } else if bar == 0 {
            return ();
        } else {
            return ();
        }
    }
}

#[system]
mod Proxy {
    fn execute(value: felt252) -> felt252 {
        value
    }
}

//! > generated_cairo_code
use array::ArrayTrait;

use serde::Serde;

struct Position {
    x: felt252,
    y: felt252,
}

#[starknet::interface]
trait IPosition<T> {
    fn name(self: @T) -> felt252;
    fn len(self: @T) -> u8;
}

#[starknet::contract]
mod PositionComponent {
    use super::Position;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, usize, u8)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('x', 'felt252', 0, 0));
        array::ArrayTrait::append(ref arr, ('y', 'felt252', 1, 0));

        arr
    }


    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Position'
    }

    #[external(v0)]
    fn len(self: @ContractState) -> usize {
        2_usize
    }

    #[external(v0)]
    fn is_indexed(self: @ContractState) -> bool {
        bool::False(())
    }
}

struct Player {
    name: felt252, 
}

#[starknet::interface]
trait IPlayer<T> {
    fn name(self: @T) -> felt252;
    fn len(self: @T) -> u8;
}

#[starknet::contract]
mod PlayerComponent {
    use super::Player;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn schema(self: @ContractState) -> Array<(felt252, felt252, usize, u8)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('name', 'felt252', 0, 0));

        arr
    }


    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Player'
    }

    #[external(v0)]
    fn len(self: @ContractState) -> usize {
        1_usize
    }

    #[external(v0)]
    fn is_indexed(self: @ContractState) -> bool {
        bool::True(())
    }
}

#[starknet::contract]
mod Spawn {
    use option::OptionTrait;
    use array::SpanTrait;

    use dojo_core::world;
    use dojo_core::interfaces::IWorldDispatcher;
    use dojo_core::interfaces::IWorldDispatcherTrait;
    use dojo_core::database::query::Query;
    use dojo_core::database::query::QueryTrait;
    use dojo_core::database::query::LiteralIntoQuery;
    use dojo_core::database::query::TupleSize1IntoQuery;
    use dojo_core::database::query::TupleSize2IntoQuery;
    use dojo_core::database::query::TupleSize3IntoQuery;
    use dojo_core::database::query::IntoPartitioned;
    use dojo_core::database::query::IntoPartitionedQuery;
    use dojo_core::execution_context::Context;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Spawn'
    }

    #[external(v0)]
    fn dependencies(self: @ContractState) -> Array<(felt252, bool)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('Player'.into(), true));
        array::ArrayTrait::append(ref arr, ('Position'.into(), true));

        arr
    }

    use traits::Into;
    use super::Position;
    use super::Player;

    #[external(v0)]
    fn execute(self: @ContractState, ctx: Context, name: felt252) {
        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Player { name: name }, ref calldata);
            ctx
                .world
                .set_entity(
                    ctx,
                    'Player',
                    (420, (69, ctx.world.uuid())).into_partitioned(),
                    0_u8,
                    array::ArrayTrait::span(@calldata)
                );
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Position { x: 0, y: 0 }, ref calldata);
            ctx
                .world
                .set_entity(
                    ctx,
                    'Position',
                    (420, (69, ctx.world.uuid())).into_partitioned(),
                    0_u8,
                    array::ArrayTrait::span(@calldata)
                );
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Player { name: name }, ref calldata);
            ctx
                .world
                .set_entity(ctx, 'Player', 420.into(), 0_u8, array::ArrayTrait::span(@calldata));
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Position { x: 0, y: 0 }, ref calldata);
            ctx
                .world
                .set_entity(ctx, 'Position', 420.into(), 0_u8, array::ArrayTrait::span(@calldata));
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Player { name: name }, ref calldata);
            ctx
                .world
                .set_entity(ctx, 'Player', 120.into(), 0_u8, array::ArrayTrait::span(@calldata));
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Position { x: 0, y: 0 }, ref calldata);
            ctx
                .world
                .set_entity(ctx, 'Position', 120.into(), 0_u8, array::ArrayTrait::span(@calldata));
        }

        let player_id = starknet::get_caller_address();

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Player { name: name }, ref calldata);
            ctx
                .world
                .set_entity(
                    ctx, 'Player', player_id.into(), 0_u8, array::ArrayTrait::span(@calldata)
                );
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Position { x: 0, y: 0 }, ref calldata);
            ctx
                .world
                .set_entity(
                    ctx, 'Position', player_id.into(), 0_u8, array::ArrayTrait::span(@calldata)
                );
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Player { name: name }, ref calldata);
            ctx
                .world
                .set_entity(
                    ctx, 'Player', (0, 0, 0, 0, 0), 0_u8, array::ArrayTrait::span(@calldata)
                );
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Position { x: 0, y: 0 }, ref calldata);
            ctx
                .world
                .set_entity(
                    ctx, 'Position', (0, 0, 0, 0, 0), 0_u8, array::ArrayTrait::span(@calldata)
                );
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Player { name: name }, ref calldata);
            ctx
                .world
                .set_entity(ctx, 'Player', 1337.into(), 0_u8, array::ArrayTrait::span(@calldata));
        }

        {
            let mut calldata = array::ArrayTrait::new();
            serde::Serde::serialize(@Position { x: 0, y: 0 }, ref calldata);
            ctx
                .world
                .set_entity(ctx, 'Position', 1337.into(), 0_u8, array::ArrayTrait::span(@calldata));
        }
        return ();
    }
}

#[starknet::contract]
mod Move {
    use option::OptionTrait;
    use array::SpanTrait;

    use dojo_core::world;
    use dojo_core::interfaces::IWorldDispatcher;
    use dojo_core::interfaces::IWorldDispatcherTrait;
    use dojo_core::database::query::Query;
    use dojo_core::database::query::QueryTrait;
    use dojo_core::database::query::LiteralIntoQuery;
    use dojo_core::database::query::TupleSize1IntoQuery;
    use dojo_core::database::query::TupleSize2IntoQuery;
    use dojo_core::database::query::TupleSize3IntoQuery;
    use dojo_core::database::query::IntoPartitioned;
    use dojo_core::database::query::IntoPartitionedQuery;
    use dojo_core::execution_context::Context;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Move'
    }

    #[external(v0)]
    fn dependencies(self: @ContractState) -> Array<(felt252, bool)> {
        let mut arr = array::ArrayTrait::new();
        array::ArrayTrait::append(ref arr, ('Player'.into(), false));
        array::ArrayTrait::append(ref arr, ('Position'.into(), false));

        arr
    }

    use traits::Into;
    use array::ArrayTrait;
    use super::Position;
    use super::Player;

    fn move_inner(positions: @Array<usize>, index: u32, count: u32) {
        return move_inner(positions, index + 1_u32, count - 1_u32);
    }

    #[external(v0)]
    fn execute(self: @ContractState, ctx: Context, player_id: felt252) {
        let mut __positions_query_ids: Array<Span<felt252>> = ArrayTrait::new();
        let mut __positions_query_entities_raw: Array<Span<Span<felt252>>> = ArrayTrait::new();

        let (__positions_query_position_ids, __positions_query_position_raw) = ctx
            .world
            .entities('Position', 0x0);
        __positions_query_ids.append(__positions_query_position_ids);
        __positions_query_entities_raw.append(__positions_query_position_raw);

        let (__positions_query_player_ids, __positions_query_player_raw) = ctx
            .world
            .entities('Player', 0x0);
        __positions_query_ids.append(__positions_query_player_ids);
        __positions_query_entities_raw.append(__positions_query_player_raw);

        let mut __positions_query_matching_entities = dojo_core::database::utils::find_matching(
            __positions_query_ids.span(), __positions_query_entities_raw.span()
        );

        let __positions = match __positions_query_matching_entities.get(0) {
            Option::Some(raw_entities) => {
                let mut raw_entities = *box::BoxTrait::unbox(raw_entities);
                let mut entities: Array<Position> = ArrayTrait::new();
                loop {
                    match raw_entities.pop_front() {
                        Option::Some(raw) => {
                            let mut raw = *raw;
                            let e = serde::Serde::<Position>::deserialize(ref raw)
                                .expect('Position failed to deserialize');
                            entities.append(e);
                        },
                        Option::None(_) => {
                            break ();
                        }
                    };
                };
                entities.span()
            },
            Option::None(_) => {
                ArrayTrait::<Position>::new().span()
            }
        };

        let __players = match __positions_query_matching_entities.get(1) {
            Option::Some(raw_entities) => {
                let mut raw_entities = *box::BoxTrait::unbox(raw_entities);
                let mut entities: Array<Player> = ArrayTrait::new();
                loop {
                    match raw_entities.pop_front() {
                        Option::Some(raw) => {
                            let mut raw = *raw;
                            let e = serde::Serde::<Player>::deserialize(ref raw)
                                .expect('Player failed to deserialize');
                            entities.append(e);
                        },
                        Option::None(_) => {
                            break ();
                        }
                    };
                };
                entities.span()
            },
            Option::None(_) => {
                ArrayTrait::<Player>::new().span()
            }
        };

        let positions_query = (__positions, __players);

        let mut __players_query_ids: Array<Span<felt252>> = ArrayTrait::new();
        let mut __players_query_entities_raw: Array<Span<Span<felt252>>> = ArrayTrait::new();

        let (__players_query_player_ids, __players_query_player_raw) = ctx
            .world
            .entities('Player', 0x0);
        __players_query_ids.append(__players_query_player_ids);
        __players_query_entities_raw.append(__players_query_player_raw);

        let mut __players_query_matching_entities = dojo_core::database::utils::find_matching(
            __players_query_ids.span(), __players_query_entities_raw.span()
        );

        let __players = match __players_query_matching_entities.get(0) {
            Option::Some(raw_entities) => {
                let mut raw_entities = *box::BoxTrait::unbox(raw_entities);
                let mut entities: Array<Player> = ArrayTrait::new();
                loop {
                    match raw_entities.pop_front() {
                        Option::Some(raw) => {
                            let mut raw = *raw;
                            let e = serde::Serde::<Player>::deserialize(ref raw)
                                .expect('Player failed to deserialize');
                            entities.append(e);
                        },
                        Option::None(_) => {
                            break ();
                        }
                    };
                };
                entities.span()
            },
            Option::None(_) => {
                ArrayTrait::<Player>::new().span()
            }
        };

        let players_query = (__players);

        let mut __player_player_raw = ctx.world.entity('Player', player_id.into(), 0_u8, 0_usize);
        assert(__player_player_raw.len() > 0_usize, 'Player not found');
        let __player_player = serde::Serde::<Player>::deserialize(ref __player_player_raw)
            .expect('Player failed to deserialize');
        let player = __player_player;

        let mut __player_position_position_raw = ctx
            .world
            .entity('Position', player_id.into(), 0_u8, 0_usize);
        assert(__player_position_position_raw.len() > 0_usize, 'Position not found');
        let __player_position_position = serde::Serde::<Position>::deserialize(
            ref __player_position_position_raw
        )
            .expect('Position failed to deserialize');

        let mut __player_position_player_raw = ctx
            .world
            .entity('Player', player_id.into(), 0_u8, 0_usize);
        assert(__player_position_player_raw.len() > 0_usize, 'Player not found');
        let __player_position_player = serde::Serde::<Player>::deserialize(
            ref __player_position_player_raw
        )
            .expect('Player failed to deserialize');
        let player_position = (__player_position_position, __player_position_player);

        let mut bar = 123;
        let mut foo = ArrayTrait::<felt252>::new();
        foo.append(bar);
        if bar == 123 {
            let mut __player_position_position_raw = ctx
                .world
                .entity('Position', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_position_raw.len() > 0_usize, 'Position not found');
            let __player_position_position = serde::Serde::<Position>::deserialize(
                ref __player_position_position_raw
            )
                .expect('Position failed to deserialize');

            let mut __player_position_player_raw = ctx
                .world
                .entity('Player', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_player_raw.len() > 0_usize, 'Player not found');
            let __player_position_player = serde::Serde::<Player>::deserialize(
                ref __player_position_player_raw
            )
                .expect('Player failed to deserialize');
            let player_position = (__player_position_position, __player_position_player);
            if foo.len() > 0_u32 {
                let mut __positions_query_ids: Array<Span<felt252>> = ArrayTrait::new();
                let mut __positions_query_entities_raw: Array<Span<Span<felt252>>> =
                    ArrayTrait::new();

                let (__positions_query_position_ids, __positions_query_position_raw) = ctx
                    .world
                    .entities('Position', 0x0);
                __positions_query_ids.append(__positions_query_position_ids);
                __positions_query_entities_raw.append(__positions_query_position_raw);

                let (__positions_query_player_ids, __positions_query_player_raw) = ctx
                    .world
                    .entities('Player', 0x0);
                __positions_query_ids.append(__positions_query_player_ids);
                __positions_query_entities_raw.append(__positions_query_player_raw);

                let mut __positions_query_matching_entities =
                    dojo_core::database::utils::find_matching(
                    __positions_query_ids.span(), __positions_query_entities_raw.span()
                );

                let __positions = match __positions_query_matching_entities.get(0) {
                    Option::Some(raw_entities) => {
                        let mut raw_entities = *box::BoxTrait::unbox(raw_entities);
                        let mut entities: Array<Position> = ArrayTrait::new();
                        loop {
                            match raw_entities.pop_front() {
                                Option::Some(raw) => {
                                    let mut raw = *raw;
                                    let e = serde::Serde::<Position>::deserialize(ref raw)
                                        .expect('Position failed to deserialize');
                                    entities.append(e);
                                },
                                Option::None(_) => {
                                    break ();
                                }
                            };
                        };
                        entities.span()
                    },
                    Option::None(_) => {
                        ArrayTrait::<Position>::new().span()
                    }
                };

                let __players = match __positions_query_matching_entities.get(1) {
                    Option::Some(raw_entities) => {
                        let mut raw_entities = *box::BoxTrait::unbox(raw_entities);
                        let mut entities: Array<Player> = ArrayTrait::new();
                        loop {
                            match raw_entities.pop_front() {
                                Option::Some(raw) => {
                                    let mut raw = *raw;
                                    let e = serde::Serde::<Player>::deserialize(ref raw)
                                        .expect('Player failed to deserialize');
                                    entities.append(e);
                                },
                                Option::None(_) => {
                                    break ();
                                }
                            };
                        };
                        entities.span()
                    },
                    Option::None(_) => {
                        ArrayTrait::<Player>::new().span()
                    }
                };

                let positions_query = (__positions, __players);
            }
        } else if bar == 321 {
            let mut __maybe_player_player_raw = ctx
                .world
                .entity('Player', player_id.into(), 0_u8, 0_usize);
            let __maybe_player_player = match __maybe_player_player_raw.len() > 0_usize {
                bool::False(()) => {
                    Option::None(())
                },
                bool::True(()) => {
                    Option::Some(
                        serde::Serde::<Player>::deserialize(ref __maybe_player_player_raw)
                            .expect('Player failed to deserialize')
                    )
                }
            };
            let maybe_player = if __maybe_player_player.is_some() {
                Option::Some(__maybe_player_player.unwrap())
            } else {
                Option::None(())
            };
            let player = maybe_player.expect('not_found');
            let name = player.name;

            let mut __positions_query_position_raw = ctx
                .world
                .entity('Position', player_id.into(), 0_u8, 0_usize);
            let __positions_query_position = match __positions_query_position_raw.len() > 0_usize {
                bool::False(()) => {
                    Option::None(())
                },
                bool::True(()) => {
                    Option::Some(
                        serde::Serde::<Position>::deserialize(ref __positions_query_position_raw)
                            .expect('Position failed to deserialize')
                    )
                }
            };

            let mut __positions_query_player_raw = ctx
                .world
                .entity('Player', player_id.into(), 0_u8, 0_usize);
            let __positions_query_player = match __positions_query_player_raw.len() > 0_usize {
                bool::False(()) => {
                    Option::None(())
                },
                bool::True(()) => {
                    Option::Some(
                        serde::Serde::<Player>::deserialize(ref __positions_query_player_raw)
                            .expect('Player failed to deserialize')
                    )
                }
            };
            let positions_query = if __positions_query_position.is_some()
                & __positions_query_player.is_some() {
                Option::Some(
                    (__positions_query_position.unwrap(), __positions_query_player.unwrap())
                )
            } else {
                Option::None(())
            };
            match positions_query {
                Option::Some((position, player)) => {},
                Option::None(()) => {},
            }
        } else {
            let mut __player_position_position_raw = ctx
                .world
                .entity('Position', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_position_raw.len() > 0_usize, 'Position not found');
            let __player_position_position = serde::Serde::<Position>::deserialize(
                ref __player_position_position_raw
            )
                .expect('Position failed to deserialize');

            let mut __player_position_player_raw = ctx
                .world
                .entity('Player', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_player_raw.len() > 0_usize, 'Player not found');
            let __player_position_player = serde::Serde::<Player>::deserialize(
                ref __player_position_player_raw
            )
                .expect('Player failed to deserialize');
            let player_position = (__player_position_position, __player_position_player);
        }
        {
            let mut __player_position_position_raw = ctx
                .world
                .entity('Position', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_position_raw.len() > 0_usize, 'Position not found');
            let __player_position_position = serde::Serde::<Position>::deserialize(
                ref __player_position_position_raw
            )
                .expect('Position failed to deserialize');

            let mut __player_position_player_raw = ctx
                .world
                .entity('Player', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_player_raw.len() > 0_usize, 'Player not found');
            let __player_position_player = serde::Serde::<Player>::deserialize(
                ref __player_position_player_raw
            )
                .expect('Player failed to deserialize');
            let player_position = (__player_position_position, __player_position_player);
        }
        let foo_bar = Option::Some(1);
        match foo_bar {
            Option::Some(x) => {
                let bar = x;

                let mut __player_position_position_raw = ctx
                    .world
                    .entity('Position', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_position_raw.len() > 0_usize, 'Position not found');
                let __player_position_position = serde::Serde::<Position>::deserialize(
                    ref __player_position_position_raw
                )
                    .expect('Position failed to deserialize');

                let mut __player_position_player_raw = ctx
                    .world
                    .entity('Player', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_player_raw.len() > 0_usize, 'Player not found');
                let __player_position_player = serde::Serde::<Player>::deserialize(
                    ref __player_position_player_raw
                )
                    .expect('Player failed to deserialize');
                let player_position = (__player_position_position, __player_position_player);
                if bar == 123 {
                    let mut __positions_query_ids: Array<Span<felt252>> = ArrayTrait::new();
                    let mut __positions_query_entities_raw: Array<Span<Span<felt252>>> =
                        ArrayTrait::new();

                    let (__positions_query_position_ids, __positions_query_position_raw) = ctx
                        .world
                        .entities('Position', 0x0);
                    __positions_query_ids.append(__positions_query_position_ids);
                    __positions_query_entities_raw.append(__positions_query_position_raw);

                    let (__positions_query_player_ids, __positions_query_player_raw) = ctx
                        .world
                        .entities('Player', 0x0);
                    __positions_query_ids.append(__positions_query_player_ids);
                    __positions_query_entities_raw.append(__positions_query_player_raw);

                    let mut __positions_query_matching_entities =
                        dojo_core::database::utils::find_matching(
                        __positions_query_ids.span(), __positions_query_entities_raw.span()
                    );

                    let __positions = match __positions_query_matching_entities.get(0) {
                        Option::Some(raw_entities) => {
                            let mut raw_entities = *box::BoxTrait::unbox(raw_entities);
                            let mut entities: Array<Position> = ArrayTrait::new();
                            loop {
                                match raw_entities.pop_front() {
                                    Option::Some(raw) => {
                                        let mut raw = *raw;
                                        let e = serde::Serde::<Position>::deserialize(ref raw)
                                            .expect('Position failed to deserialize');
                                        entities.append(e);
                                    },
                                    Option::None(_) => {
                                        break ();
                                    }
                                };
                            };
                            entities.span()
                        },
                        Option::None(_) => {
                            ArrayTrait::<Position>::new().span()
                        }
                    };

                    let __players = match __positions_query_matching_entities.get(1) {
                        Option::Some(raw_entities) => {
                            let mut raw_entities = *box::BoxTrait::unbox(raw_entities);
                            let mut entities: Array<Player> = ArrayTrait::new();
                            loop {
                                match raw_entities.pop_front() {
                                    Option::Some(raw) => {
                                        let mut raw = *raw;
                                        let e = serde::Serde::<Player>::deserialize(ref raw)
                                            .expect('Player failed to deserialize');
                                        entities.append(e);
                                    },
                                    Option::None(_) => {
                                        break ();
                                    }
                                };
                            };
                            entities.span()
                        },
                        Option::None(_) => {
                            ArrayTrait::<Player>::new().span()
                        }
                    };

                    let positions_query = (__positions, __players);
                }
            },
            Option::None(()) => {
                let mut __player_position_position_raw = ctx
                    .world
                    .entity('Position', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_position_raw.len() > 0_usize, 'Position not found');
                let __player_position_position = serde::Serde::<Position>::deserialize(
                    ref __player_position_position_raw
                )
                    .expect('Position failed to deserialize');

                let mut __player_position_player_raw = ctx
                    .world
                    .entity('Player', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_player_raw.len() > 0_usize, 'Player not found');
                let __player_position_player = serde::Serde::<Player>::deserialize(
                    ref __player_position_player_raw
                )
                    .expect('Player failed to deserialize');
                let player_position = (__player_position_position, __player_position_player);
            },
        }
        let foo = match foo_bar {
            Option::Some(x) => {
                'foo'
            },
            Option::None(()) => 'bar',
        };

        let mut calldata = ArrayTrait::new();
        calldata.append('name');
        ctx.world.execute('SpawnSystem', calldata.span());

        let mut i = 0;
        loop {
            if i == 3 {
                break ();
            }
            let mut __player_position_position_raw = ctx
                .world
                .entity('Position', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_position_raw.len() > 0_usize, 'Position not found');
            let __player_position_position = serde::Serde::<Position>::deserialize(
                ref __player_position_position_raw
            )
                .expect('Position failed to deserialize');

            let mut __player_position_player_raw = ctx
                .world
                .entity('Player', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_player_raw.len() > 0_usize, 'Player not found');
            let __player_position_player = serde::Serde::<Player>::deserialize(
                ref __player_position_player_raw
            )
                .expect('Player failed to deserialize');
            let player_position = (__player_position_position, __player_position_player);
            i += 0;
        };
        if bar == 123 {
            return ();
        } else if bar == 0 {
            return ();
        } else {
            return ();
        }
    }
}

#[starknet::contract]
mod Proxy {
    use option::OptionTrait;
    use array::SpanTrait;

    use dojo_core::world;
    use dojo_core::interfaces::IWorldDispatcher;
    use dojo_core::interfaces::IWorldDispatcherTrait;
    use dojo_core::database::query::Query;
    use dojo_core::database::query::QueryTrait;
    use dojo_core::database::query::LiteralIntoQuery;
    use dojo_core::database::query::TupleSize1IntoQuery;
    use dojo_core::database::query::TupleSize2IntoQuery;
    use dojo_core::database::query::TupleSize3IntoQuery;
    use dojo_core::database::query::IntoPartitioned;
    use dojo_core::database::query::IntoPartitionedQuery;
    use dojo_core::execution_context::Context;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Proxy'
    }

    #[external(v0)]
    fn dependencies(self: @ContractState) -> Array<(felt252, bool)> {
        let mut arr = array::ArrayTrait::new();

        arr
    }


    #[external(v0)]
    fn execute(self: @ContractState, ctx: Context, value: felt252) -> felt252 {
        value
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "(context, query, (components,))"
 --> lib.cairo:44:14
        set !(ctx, (
             ^*****^

error: Plugin diagnostic: Component types cannot be empty
 --> lib.cairo:135:19
        let err = get!(ctx, player_id.into(), ());
                  ^*****************************^

error: Plugin diagnostic: Unexpected argument type. Expected: "dojo_core::database::query::Query", found: "(?78, ?79, ?80, ?81, ?82)".
 --> lib.cairo:49:20
        set !(ctx, (0, 0, 0, 0, 0), (
                   ^*************^

error: Plugin diagnostic: Unexpected argument type. Expected: "dojo_core::database::query::Query", found: "(?90, ?91, ?92, ?93, ?94)".
 --> lib.cairo:49:20
        set !(ctx, (0, 0, 0, 0, 0), (
                   ^*************^
