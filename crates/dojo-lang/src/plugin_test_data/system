//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
use array::ArrayTrait;
use serde::Serde;

#[derive(Component)]
struct Position {
    x: felt252,
    y: felt252,
}

#[derive(Component)]
#[component(indexed: true)]
struct Player {
    name: felt252, 
}

#[system]
mod Spawn {
    use array::ArrayTrait;
    use traits::Into;   
    use starknet::contract_address::ContractAddressIntoFelt252;

    use super::Position;
    use super::Player;

    fn execute(name: felt252) {
        let uuid = commands::uuid();
        commands::set_entity((420, (69, uuid)).into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        commands::set_entity(420.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        let player_id = starknet::get_caller_address();
        commands::set_entity(player_id.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        commands::set_entity((
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        commands::set_entity((0, 0, 0, 0, 0), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));

        commands::set_entity(1337.into(), (
            Player { name: name },
            Position { x: 0, y: 0 },
        ));
        return ();
    }
}

#[system]
mod Move {
    use traits::Into;
    use array::ArrayTrait;
    use super::Position;
    use super::Player;

    fn move_inner(positions: @Array<usize>, index: u32, count: u32) {
        return move_inner(positions, index + 1_u32, count - 1_u32);
    }

    fn execute(player_id: felt252) {
        let positions_query = commands::<(Position, Player)>::entities();
        let players_query = commands::<Player>::entities();
        let player = commands::<Player>::entity(player_id.into());
        let player_position = commands::<(Position, Player)>::entity(player_id.into());

        let mut bar = 123;
        let mut foo = ArrayTrait::<felt252>::new();
        foo.append(bar);

        if bar == 123 {
            let player_position = commands::<(Position, Player)>::entity(player_id.into());
            if foo.len() > 0_u32 {
                let positions_query = commands::<(Position, Player)>::entities();
            }
        } else if bar == 321 {
            let maybe_player = commands::<Player>::try_entity(player_id.into());
            let player = maybe_player.expect('not_found');
            let name = player.name;

            let positions_query = commands::<(Position, Player)>::try_entity(player_id.into());
            match positions_query {
                Option::Some((position, player)) => {
                    // do nothing
                },
                Option::None(()) => {
                    // do nothing
                }
            }
        } else {
            let player_position = commands::<(Position, Player)>::entity(player_id.into());
        }

        {
            let player_position = commands::<(Position, Player)>::entity(player_id.into());
        }

        let foo_bar = Option::Some(1);
        match foo_bar {
            Option::Some(x) => {
                let bar = x;
                let player_position = commands::<(Position, Player)>::entity(player_id.into());
                if bar == 123 {
                    let positions_query = commands::<(Position, Player)>::entities();
                }
            },
            Option::None(()) => {
                let player_position = commands::<(Position, Player)>::entity(player_id.into());
            }
        }

        let foo = match foo_bar {
            Option::Some(x) => {'foo'},
            Option::None(()) => 'bar',
        };

        let mut calldata = ArrayTrait::new();
        calldata.append('name');
        commands::execute(SpawnSystem, calldata.span());

        move_inner(@positions_query, 0_u32, positions_query.len());

        let err = commands::<>::entity(player_id.into());

        if bar == 123 {
            return ();
        } else if bar == 0 {
            return ();
        } else {
            return ();
        }
    }
}

//! > generated_cairo_code
use array::ArrayTrait;

use serde::Serde;

#[derive(Copy, Drop, Serde)]
struct Position {
    x: felt252,
    y: felt252,
}

#[abi]
trait IPosition {
    fn name() -> felt252;
    fn len() -> u8;
    fn serialize(raw: Span<felt252>) -> Position;
    fn deserialize(value: Position) -> Span<felt252>;
}

#[contract]
mod PositionComponent {
    use array::ArrayTrait;
    use option::OptionTrait;
    use dojo_core::serde::SpanSerde;
    use super::Position;

    #[view]
    fn name() -> felt252 {
        'Position'
    }

    #[view]
    fn len() -> usize {
        2_usize
    }

    #[view]
    fn is_indexed() -> bool {
        bool::False(())
    }
}

#[derive(Copy, Drop, Serde)]
struct Player {
    name: felt252, 
}

#[abi]
trait IPlayer {
    fn name() -> felt252;
    fn len() -> u8;
    fn serialize(raw: Span<felt252>) -> Player;
    fn deserialize(value: Player) -> Span<felt252>;
}

#[contract]
mod PlayerComponent {
    use array::ArrayTrait;
    use option::OptionTrait;
    use dojo_core::serde::SpanSerde;
    use super::Player;

    #[view]
    fn name() -> felt252 {
        'Player'
    }

    #[view]
    fn len() -> usize {
        1_usize
    }

    #[view]
    fn is_indexed() -> bool {
        bool::True(())
    }
}

#[contract]
mod SpawnSystem {
    use option::OptionTrait;
    use array::SpanTrait;

    use dojo_core::world;
    use dojo_core::interfaces::IWorldDispatcher;
    use dojo_core::interfaces::IWorldDispatcherTrait;
    use dojo_core::storage::query::Query;
    use dojo_core::storage::query::QueryTrait;
    use dojo_core::storage::query::Felt252IntoQuery;
    use dojo_core::storage::query::TupleSize1IntoQuery;
    use dojo_core::storage::query::TupleSize2IntoQuery;
    use dojo_core::storage::query::TupleSize3IntoQuery;
    use dojo_core::storage::query::TupleSize1IntoPartitionedQuery;
    use dojo_core::storage::query::TupleSize2IntoPartitionedQuery;
    use dojo_core::storage::query::ContractAddressIntoQuery;

    #[view]
    fn name() -> felt252 {
        'Spawn'
    }

    use array::ArrayTrait;
    use traits::Into;
    use starknet::contract_address::ContractAddressIntoFelt252;

    use super::Position;
    use super::Player;

    #[external]
    fn execute(name: felt252, world_address: starknet::ContractAddress) {
        let uuid = IWorldDispatcher { contract_address: world_address }.uuid();

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Player>::serialize(ref calldata, Player { name: name });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Player', (420, (69, uuid)).into(), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Position>::serialize(ref calldata, Position { x: 0, y: 0 });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Position', (420, (69, uuid)).into(), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Player>::serialize(ref calldata, Player { name: name });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Player', 420.into(), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Position>::serialize(ref calldata, Position { x: 0, y: 0 });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Position', 420.into(), 0_u8, calldata.span());
        }

        let player_id = starknet::get_caller_address();

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Player>::serialize(ref calldata, Player { name: name });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Player', player_id.into(), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Position>::serialize(ref calldata, Position { x: 0, y: 0 });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Position', player_id.into(), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Player>::serialize(ref calldata, Player { name: name });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Player', (0, 0, 0, 0, 0), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Position>::serialize(ref calldata, Position { x: 0, y: 0 });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Position', (0, 0, 0, 0, 0), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Player>::serialize(ref calldata, Player { name: name });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Player', 1337.into(), 0_u8, calldata.span());
        }

        {
            let mut calldata = ArrayTrait::new();
            serde::Serde::<Position>::serialize(ref calldata, Position { x: 0, y: 0 });
            IWorldDispatcher {
                contract_address: world_address
            }.set_entity('Position', 1337.into(), 0_u8, calldata.span());
        }
        return ();
    }
}

#[contract]
mod MoveSystem {
    use option::OptionTrait;
    use array::SpanTrait;

    use dojo_core::world;
    use dojo_core::interfaces::IWorldDispatcher;
    use dojo_core::interfaces::IWorldDispatcherTrait;
    use dojo_core::storage::query::Query;
    use dojo_core::storage::query::QueryTrait;
    use dojo_core::storage::query::Felt252IntoQuery;
    use dojo_core::storage::query::TupleSize1IntoQuery;
    use dojo_core::storage::query::TupleSize2IntoQuery;
    use dojo_core::storage::query::TupleSize3IntoQuery;
    use dojo_core::storage::query::TupleSize1IntoPartitionedQuery;
    use dojo_core::storage::query::TupleSize2IntoPartitionedQuery;
    use dojo_core::storage::query::ContractAddressIntoQuery;

    #[view]
    fn name() -> felt252 {
        'Move'
    }

    use traits::Into;
    use array::ArrayTrait;
    use super::Position;
    use super::Player;

    fn move_inner(positions: @Array<usize>, index: u32, count: u32) {
        return move_inner(positions, index + 1_u32, count - 1_u32);
    }

    #[external]
    fn execute(player_id: felt252, world_address: starknet::ContractAddress) {
        let positions_query = ArrayTrait::<usize>::new();
        let __positions_query_position_ids = IWorldDispatcher {
            contract_address: world_address
        }.entities('Position', 0);

        let __positions_query_player_ids = IWorldDispatcher {
            contract_address: world_address
        }.entities('Player', 0);
        let players_query = ArrayTrait::<usize>::new();
        let __players_query_player_ids = IWorldDispatcher {
            contract_address: world_address
        }.entities('Player', 0);

        let mut __player_player_raw = IWorldDispatcher {
            contract_address: world_address
        }.entity('Player', player_id.into(), 0_u8, 0_usize);
        assert(__player_player_raw.len() > 0_usize, 'Failed to find Player');
        let __player_player = serde::Serde::<Player>::deserialize(
            ref __player_player_raw
        ).expect('Failed to deserialize Player');
        let player = __player_player;

        let mut __player_position_position_raw = IWorldDispatcher {
            contract_address: world_address
        }.entity('Position', player_id.into(), 0_u8, 0_usize);
        assert(__player_position_position_raw.len() > 0_usize, 'Failed to find Position');
        let __player_position_position = serde::Serde::<Position>::deserialize(
            ref __player_position_position_raw
        ).expect('Failed to deserialize Position');

        let mut __player_position_player_raw = IWorldDispatcher {
            contract_address: world_address
        }.entity('Player', player_id.into(), 0_u8, 0_usize);
        assert(__player_position_player_raw.len() > 0_usize, 'Failed to find Player');
        let __player_position_player = serde::Serde::<Player>::deserialize(
            ref __player_position_player_raw
        ).expect('Failed to deserialize Player');
        let player_position = (__player_position_position, __player_position_player);

        let mut bar = 123;
        let mut foo = ArrayTrait::<felt252>::new();
        foo.append(bar);
        if bar == 123 {
            let mut __player_position_position_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Position', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_position_raw.len() > 0_usize, 'Failed to find Position');
            let __player_position_position = serde::Serde::<Position>::deserialize(
                ref __player_position_position_raw
            ).expect('Failed to deserialize Position');

            let mut __player_position_player_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Player', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_player_raw.len() > 0_usize, 'Failed to find Player');
            let __player_position_player = serde::Serde::<Player>::deserialize(
                ref __player_position_player_raw
            ).expect('Failed to deserialize Player');
            let player_position = (__player_position_position, __player_position_player);
            if foo.len() > 0_u32 {
                let positions_query = ArrayTrait::<usize>::new();
                let __positions_query_position_ids = IWorldDispatcher {
                    contract_address: world_address
                }.entities('Position', 0);

                let __positions_query_player_ids = IWorldDispatcher {
                    contract_address: world_address
                }.entities('Player', 0);
            }
        } else if bar == 321 {
            let mut __maybe_player_player_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Player', player_id.into(), 0_u8, 0_usize);
            let __maybe_player_player = match __maybe_player_player_raw.len() > 0_usize {
                bool::False(()) => {
                    Option::None(())
                },
                bool::True(()) => {
                    Option::Some(
                        serde::Serde::<Player>::deserialize(
                            ref __maybe_player_player_raw
                        ).expect('Failed to deserialize Player')
                    )
                }
            };
            let maybe_player = if __maybe_player_player.is_some() {
                Option::Some(__maybe_player_player.unwrap())
            } else {
                Option::None(())
            };
            let player = maybe_player.expect('not_found');
            let name = player.name;

            let mut __positions_query_position_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Position', player_id.into(), 0_u8, 0_usize);
            let __positions_query_position = match __positions_query_position_raw.len() > 0_usize {
                bool::False(()) => {
                    Option::None(())
                },
                bool::True(()) => {
                    Option::Some(
                        serde::Serde::<Position>::deserialize(
                            ref __positions_query_position_raw
                        ).expect('Failed to deserialize Position')
                    )
                }
            };

            let mut __positions_query_player_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Player', player_id.into(), 0_u8, 0_usize);
            let __positions_query_player = match __positions_query_player_raw.len() > 0_usize {
                bool::False(()) => {
                    Option::None(())
                },
                bool::True(()) => {
                    Option::Some(
                        serde::Serde::<Player>::deserialize(
                            ref __positions_query_player_raw
                        ).expect('Failed to deserialize Player')
                    )
                }
            };
            let positions_query =
                if __positions_query_position.is_some() & __positions_query_player.is_some() {
                Option::Some(
                    (__positions_query_position.unwrap(), __positions_query_player.unwrap())
                )
            } else {
                Option::None(())
            };
            match positions_query {
                Option::Some((position, player)) => {},
                Option::None(()) => {},
            }
        } else {
            let mut __player_position_position_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Position', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_position_raw.len() > 0_usize, 'Failed to find Position');
            let __player_position_position = serde::Serde::<Position>::deserialize(
                ref __player_position_position_raw
            ).expect('Failed to deserialize Position');

            let mut __player_position_player_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Player', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_player_raw.len() > 0_usize, 'Failed to find Player');
            let __player_position_player = serde::Serde::<Player>::deserialize(
                ref __player_position_player_raw
            ).expect('Failed to deserialize Player');
            let player_position = (__player_position_position, __player_position_player);
        }
        {
            let mut __player_position_position_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Position', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_position_raw.len() > 0_usize, 'Failed to find Position');
            let __player_position_position = serde::Serde::<Position>::deserialize(
                ref __player_position_position_raw
            ).expect('Failed to deserialize Position');

            let mut __player_position_player_raw = IWorldDispatcher {
                contract_address: world_address
            }.entity('Player', player_id.into(), 0_u8, 0_usize);
            assert(__player_position_player_raw.len() > 0_usize, 'Failed to find Player');
            let __player_position_player = serde::Serde::<Player>::deserialize(
                ref __player_position_player_raw
            ).expect('Failed to deserialize Player');
            let player_position = (__player_position_position, __player_position_player);
        }
        let foo_bar = Option::Some(1);
        match foo_bar {
            Option::Some(x) => {
                let bar = x;

                let mut __player_position_position_raw = IWorldDispatcher {
                    contract_address: world_address
                }.entity('Position', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_position_raw.len() > 0_usize, 'Failed to find Position');
                let __player_position_position = serde::Serde::<Position>::deserialize(
                    ref __player_position_position_raw
                ).expect('Failed to deserialize Position');

                let mut __player_position_player_raw = IWorldDispatcher {
                    contract_address: world_address
                }.entity('Player', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_player_raw.len() > 0_usize, 'Failed to find Player');
                let __player_position_player = serde::Serde::<Player>::deserialize(
                    ref __player_position_player_raw
                ).expect('Failed to deserialize Player');
                let player_position = (__player_position_position, __player_position_player);
                if bar == 123 {
                    let positions_query = ArrayTrait::<usize>::new();
                    let __positions_query_position_ids = IWorldDispatcher {
                        contract_address: world_address
                    }.entities('Position', 0);

                    let __positions_query_player_ids = IWorldDispatcher {
                        contract_address: world_address
                    }.entities('Player', 0);
                }
            },
            Option::None(()) => {
                let mut __player_position_position_raw = IWorldDispatcher {
                    contract_address: world_address
                }.entity('Position', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_position_raw.len() > 0_usize, 'Failed to find Position');
                let __player_position_position = serde::Serde::<Position>::deserialize(
                    ref __player_position_position_raw
                ).expect('Failed to deserialize Position');

                let mut __player_position_player_raw = IWorldDispatcher {
                    contract_address: world_address
                }.entity('Player', player_id.into(), 0_u8, 0_usize);
                assert(__player_position_player_raw.len() > 0_usize, 'Failed to find Player');
                let __player_position_player = serde::Serde::<Player>::deserialize(
                    ref __player_position_player_raw
                ).expect('Failed to deserialize Player');
                let player_position = (__player_position_position, __player_position_player);
            },
        }
        let foo = match foo_bar {
            Option::Some(x) => {
                'foo'
            },
            Option::None(()) => 'bar',
        };

        let mut calldata = ArrayTrait::new();
        calldata.append('name');
        IWorldDispatcher {
            contract_address: world_address
        }.execute('SpawnSystem', calldata.span());

        move_inner(@positions_query, 0_u32, positions_query.len());
        if bar == 123 {
            return ();
        } else if bar == 0 {
            return ();
        } else {
            return ();
        }
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "(query, (components,))"
 --> lib.cairo:43:29
        commands::set_entity((
                            ^^

error: Plugin diagnostic: Component types cannot be empty
 --> lib.cairo:134:19
        let err = commands::<>::entity(player_id.into());
                  ^************************************^

error: Plugin diagnostic: Unexpected argument type. Expected: "dojo_core::storage::query::Query", found: "(?58, ?59, ?60, ?61, ?62)".
 --> Spawn:77:99
                        IWorldDispatcher { contract_address: world_address }.set_entity('Player', (0, 0, 0, 0, 0), 0_u8, calldata.span());
                                                                                                  ^*************^

error: Plugin diagnostic: Unexpected argument type. Expected: "dojo_core::storage::query::Query", found: "(?70, ?71, ?72, ?73, ?74)".
 --> Spawn:83:101
                        IWorldDispatcher { contract_address: world_address }.set_entity('Position', (0, 0, 0, 0, 0), 0_u8, calldata.span());
                                                                                                    ^*************^
