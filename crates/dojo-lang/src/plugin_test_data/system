//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
extern type Query<T>;

#[component]
mod PositionComponent {
    #[derive(Copy)]
    struct Position {
        x: felt,
        y: felt,
    }
}

#[component]
mod HealthComponent {
    #[derive(Copy)]
    struct Health {
        hp: felt,
    }
}

#[system]
mod MoveSystem {
    use PositionComponent::Position;
    use HealthComponent::Health;

    fn execute_inner(query: Query::<(Position, Option::<Health>)>) {
        return ();
    }

    fn execute(world: felt, query: Query::<(Position, Option::<Health>)>) {
        return ();
    }
}

//! > generated_cairo_code
#[contract]
mod PositionComponent {
    #[derive(Copy)]
    struct Position {
        x: felt,
        y: felt,
    }

    struct Storage {
        world_address: felt,
        state: LegacyMap::<felt, Position>,
    }

    // Initialize PositionComponent.
    #[external]
    fn initialize(world_addr: felt) {
        let world = world_address::read();
        assert(world == 0, 'already initialized.');
        world_address::write(world_addr);
    }

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Position) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Position {
        return state::read(entity_id);
    }

    impl PositionSerde of serde::Serde::<Position> {
        fn serialize(ref serialized: Array::<felt>, input: Position) {
            serde::Serde::<felt>::serialize(ref serialized, input.x);
            serde::Serde::<felt>::serialize(ref serialized, input.y);
        }
        fn deserialize(ref serialized: Array::<felt>) -> Option::<Position> {
            Option::Some(
                Position {
                    x: serde::Serde::<felt>::deserialize(ref serialized)?,
                    y: serde::Serde::<felt>::deserialize(ref serialized)?,
                }
            )
        }
    }

    impl StorageAccessPosition of starknet::StorageAccess::<Position> {
        fn read(
            address_domain: felt, base: starknet::StorageBaseAddress
        ) -> starknet::SyscallResult::<Position> {
            Result::Ok(
                Position {
                    x: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                    )?,
                    y: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8)
                    )?,
                }
            )
        }
        fn write(
            address_domain: felt, base: starknet::StorageBaseAddress, value: Position
        ) -> starknet::SyscallResult::<()> {
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.x
            )?;
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 1_u8), value.y
            )
        }
    }
}

#[contract]
mod HealthComponent {
    #[derive(Copy)]
    struct Health {
        hp: felt, 
    }

    struct Storage {
        world_address: felt,
        state: LegacyMap::<felt, Health>,
    }

    // Initialize HealthComponent.
    #[external]
    fn initialize(world_addr: felt) {
        let world = world_address::read();
        assert(world == 0, 'already initialized.');
        world_address::write(world_addr);
    }

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Health) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Health {
        return state::read(entity_id);
    }

    impl HealthSerde of serde::Serde::<Health> {
        fn serialize(ref serialized: Array::<felt>, input: Health) {
            serde::Serde::<felt>::serialize(ref serialized, input.hp);
        }
        fn deserialize(ref serialized: Array::<felt>) -> Option::<Health> {
            Option::Some(Health { hp: serde::Serde::<felt>::deserialize(ref serialized)?,  })
        }
    }

    impl StorageAccessHealth of starknet::StorageAccess::<Health> {
        fn read(
            address_domain: felt, base: starknet::StorageBaseAddress
        ) -> starknet::SyscallResult::<Health> {
            Result::Ok(
                Health {
                    hp: starknet::storage_read_syscall(
                        address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8)
                    )?,
                }
            )
        }
        fn write(
            address_domain: felt, base: starknet::StorageBaseAddress, value: Health
        ) -> starknet::SyscallResult::<()> {
            starknet::storage_write_syscall(
                address_domain, starknet::storage_address_from_base_and_offset(base, 0_u8), value.hp
            )
        }
    }
}

#[contract]
mod MoveSystem {
    use PositionComponent::Position;
    use HealthComponent::Health;

    fn execute_inner(query: Query::<(Position, Option::<Health>)>) {
        return ();
    }
    struct Storage {
        world_address: felt, 
    }

    #[external]
    fn initialize(world_addr: felt) {
        let world = world_address::read();
        assert(world == 0, 'already initialized.');
        world_address::write(world_addr);
    }

    #[external]
    fn execute() {
        let world = world_address::read();
        assert(world != 0, 'not initialized.');

        let position_ids = IWorld.lookup(
            world, 0x3718a0ff90de39b4acf137c1a27b0427c2c3f60c23c4f7c20b85c578d2c5897
        );
        let health_ids = IWorld.lookup(
            world, 0x1690bb282da6a011c52715e2188378c769966964ca2332dccad8d7542983bc2
        );

        return ();
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Identifier not found.
 --> MoveSystem:3:13
        use PositionComponent::Position;
            ^***************^

error: Plugin diagnostic: Identifier not found.
 --> MoveSystem:4:9
    use HealthComponent::Health;
        ^*************^

error: Plugin diagnostic: Type not found.
 --> MoveSystem:6:29
    fn execute_inner(query: Query::<(Position, Option::<Health>)>) {
                            ^***^

error: Plugin diagnostic: Identifier not found.
 --> MoveSystem:25:24
    let position_ids = IWorld.lookup(world, 0x3718a0ff90de39b4acf137c1a27b0427c2c3f60c23c4f7c20b85c578d2c5897);let health_ids = IWorld.lookup(world, 0x1690bb282da6a011c52715e2188378c769966964ca2332dccad8d7542983bc2);
                       ^****^

error: Plugin diagnostic: Unknown function.
 --> MoveSystem:25:31
    let position_ids = IWorld.lookup(world, 0x3718a0ff90de39b4acf137c1a27b0427c2c3f60c23c4f7c20b85c578d2c5897);let health_ids = IWorld.lookup(world, 0x1690bb282da6a011c52715e2188378c769966964ca2332dccad8d7542983bc2);
                              ^****^

error: Plugin diagnostic: Identifier not found.
 --> MoveSystem:25:129
    let position_ids = IWorld.lookup(world, 0x3718a0ff90de39b4acf137c1a27b0427c2c3f60c23c4f7c20b85c578d2c5897);let health_ids = IWorld.lookup(world, 0x1690bb282da6a011c52715e2188378c769966964ca2332dccad8d7542983bc2);
                                                                                                                                ^****^

error: Plugin diagnostic: Unknown function.
 --> MoveSystem:25:136
    let position_ids = IWorld.lookup(world, 0x3718a0ff90de39b4acf137c1a27b0427c2c3f60c23c4f7c20b85c578d2c5897);let health_ids = IWorld.lookup(world, 0x1690bb282da6a011c52715e2188378c769966964ca2332dccad8d7542983bc2);
                                                                                                                                       ^****^
