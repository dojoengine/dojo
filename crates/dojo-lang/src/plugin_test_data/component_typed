//! > Test expansion of the component contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[derive(Component)]
struct Fighter {
    attack: u16,
    defense: u16,
    speed: u32,
    luck: u8,
    name: felt252
}

//! > generated_cairo_code
#[derive(Copy, Drop)]
struct Fighter {
    attack: u16,
    defense: u16,
    speed: u32,
    luck: u8,
    name: felt252
}

#[abi]
trait IFighter {
    fn name() -> felt252;
    fn len() -> u8;
    fn serialize(raw: Span<felt252>) -> Fighter;
    fn deserialize(value: Fighter) -> Span<felt252>;
}

impl FighterSerde of serde::Serde::<Fighter> {
    fn serialize(ref serialized: Array::<felt252>, input: Fighter) {
        serde::Serde::<u16>::serialize(ref serialized, input.attack);
        serde::Serde::<u16>::serialize(ref serialized, input.defense);
        serde::Serde::<u32>::serialize(ref serialized, input.speed);
        serde::Serde::<u8>::serialize(ref serialized, input.luck);
        serde::Serde::<felt252>::serialize(ref serialized, input.name);
    }
    fn deserialize(ref serialized: Span::<felt252>) -> Option::<Fighter> {
        Option::Some(
            Fighter {
                attack: serde::Serde::<u16>::deserialize(ref serialized)?,
                defense: serde::Serde::<u16>::deserialize(ref serialized)?,
                speed: serde::Serde::<u32>::deserialize(ref serialized)?,
                luck: serde::Serde::<u8>::deserialize(ref serialized)?,
                name: serde::Serde::<felt252>::deserialize(ref serialized)?,
            }
        )
    }
}

#[contract]
mod FighterComponent {
    use array::ArrayTrait;
    use option::OptionTrait;
    use dojo_core::serde::SpanSerde;
    use super::Fighter;

    #[view]
    fn name() -> felt252 {
        'Fighter'
    }

    #[view]
    fn len() -> usize {
        5_usize
    }

    // Serialize an entity.
    #[view]
    fn serialize(mut raw: Span<felt252>) -> Fighter {
        serde::Serde::<Fighter>::deserialize(ref raw).unwrap()
    }

    // Get the state of an entity.
    #[view]
    #[raw_output]
    fn deserialize(value: Fighter) -> Span<felt252> {
        let mut arr = ArrayTrait::new();
        serde::Serde::<Fighter>::serialize(ref arr, value);
        arr.span()
    }
}

//! > expected_diagnostics
