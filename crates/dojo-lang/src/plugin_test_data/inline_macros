//! > Test set! macro.

//! > test_runner_name
test_expand_plugin

//! > cairo_code
struct Player {
    #[key]
    key: felt252,
    name: felt252
}

struct Position {
    #[key]
    key: felt252,
    x: felt252,
    y: felt252
}

const world: felt252 = 0xbeef;
const player: Player = Player { key: 'key', name: 'name' };

fn foo() {
    // Should not emit diagnostics for unknown macros
    let arr = array![1, 2, 3];
    set!(world, (
        player,
        Position { key: 'key', x: 0, y: 0 },
    ));

    set!();
    set!(world, ());
}

//! > generated_cairo_code
struct Player {
    #[key]
    key: felt252,
    name: felt252
}


struct Position {
    #[key]
    key: felt252,
    x: felt252,
    y: felt252
}


const world: felt252 = 0xbeef;

const player: Player = Player { key: 'key', name: 'name' };

fn foo() {
    // Should not emit diagnostics for unknown macros
    let arr = array![1, 2, 3];
    {
        let __set_macro_value__ = player;
        world
            .set_entity(
                dojo::traits::Component::name(@__set_macro_value__),
                dojo::traits::Component::keys(@__set_macro_value__),
                0_u8,
                dojo::traits::Component::values(@__set_macro_value__)
            );
        let __set_macro_value__ = Position { key: 'key', x: 0, y: 0 };
        world
            .set_entity(
                dojo::traits::Component::name(@__set_macro_value__),
                dojo::traits::Component::keys(@__set_macro_value__),
                0_u8,
                dojo::traits::Component::values(@__set_macro_value__)
            );
    };
; ; }

//! > expected_diagnostics
error: Invalid arguments. Expected "(world, (components,))"
 --> dummy_file.cairo:25:10
    set!();
         ^

error: Invalid arguments: No components provided.
 --> dummy_file.cairo:26:10
    set!(world, ());
         ^*******^

//! > ==========================================================================

//! > Test get! macro.

//! > test_runner_name
test_expand_plugin

//! > cairo_code
fn foo() {
    let (position, moves) = get!(world, 0x420, (Position, Moves));
    let position = get!(world, (0x420, 0x1337), Position);

    let id = (0x420, 0x1337);
    let position = get!(world, id, Position);
}

//! > generated_cairo_code
fn foo() {
    let (position, moves) = {
        let mut __get_macro_keys__ = array::ArrayTrait::new();
        serde::Serde::serialize(@(0x420), ref __get_macro_keys__);
        let __get_macro_keys__ = array::ArrayTrait::span(@__get_macro_keys__);
        let __Position_values__ = world
            .entity('Position', __get_macro_keys__, 0_u8, dojo::SerdeLen::<Position>::len());
        let mut __Position_component__ = array::ArrayTrait::new();
        array::serialize_array_helper(__get_macro_keys__, ref __Position_component__);
        array::serialize_array_helper(__Position_values__, ref __Position_component__);
        let mut __Position_component_span__ = array::ArrayTrait::span(@__Position_component__);
        let __Position = option::OptionTrait::expect(
            serde::Serde::<Position>::deserialize(ref __Position_component_span__),
            'Position failed to deserialize'
        );
        let __Moves_values__ = world
            .entity('Moves', __get_macro_keys__, 0_u8, dojo::SerdeLen::<Moves>::len());
        let mut __Moves_component__ = array::ArrayTrait::new();
        array::serialize_array_helper(__get_macro_keys__, ref __Moves_component__);
        array::serialize_array_helper(__Moves_values__, ref __Moves_component__);
        let mut __Moves_component_span__ = array::ArrayTrait::span(@__Moves_component__);
        let __Moves = option::OptionTrait::expect(
            serde::Serde::<Moves>::deserialize(ref __Moves_component_span__),
            'Moves failed to deserialize'
        );
        (__Position, __Moves)
    };
    let position = {
        let mut __get_macro_keys__ = array::ArrayTrait::new();
        serde::Serde::serialize(@(0x420, 0x1337), ref __get_macro_keys__);
        let __get_macro_keys__ = array::ArrayTrait::span(@__get_macro_keys__);
        let __Position_values__ = world
            .entity('Position', __get_macro_keys__, 0_u8, dojo::SerdeLen::<Position>::len());
        let mut __Position_component__ = array::ArrayTrait::new();
        array::serialize_array_helper(__get_macro_keys__, ref __Position_component__);
        array::serialize_array_helper(__Position_values__, ref __Position_component__);
        let mut __Position_component_span__ = array::ArrayTrait::span(@__Position_component__);
        let __Position = option::OptionTrait::expect(
            serde::Serde::<Position>::deserialize(ref __Position_component_span__),
            'Position failed to deserialize'
        );
        (__Position)
    };

    let id = (0x420, 0x1337);
    let position = {
        let mut __get_macro_keys__ = array::ArrayTrait::new();
        serde::Serde::serialize(@id, ref __get_macro_keys__);
        let __get_macro_keys__ = array::ArrayTrait::span(@__get_macro_keys__);
        let __Position_values__ = world
            .entity('Position', __get_macro_keys__, 0_u8, dojo::SerdeLen::<Position>::len());
        let mut __Position_component__ = array::ArrayTrait::new();
        array::serialize_array_helper(__get_macro_keys__, ref __Position_component__);
        array::serialize_array_helper(__Position_values__, ref __Position_component__);
        let mut __Position_component_span__ = array::ArrayTrait::span(@__Position_component__);
        let __Position = option::OptionTrait::expect(
            serde::Serde::<Position>::deserialize(ref __Position_component_span__),
            'Position failed to deserialize'
        );
        (__Position)
    };
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test emit! macro.

//! > test_runner_name
test_expand_plugin

//! > cairo_code
fn foo() {
    // A comment should not affect macro name
    emit!(world, Struct {
        x: 10,
    });

    let id = (0x420, 0x1337);
    emit!(world, id);
}

//! > generated_cairo_code
fn foo() {
    {
        let mut keys = Default::<array::Array>::default();
        let mut data = Default::<array::Array>::default();
        starknet::Event::append_keys_and_data(@Struct { x: 10,  }, ref keys, ref data);
        world.emit(keys, data.span());
    };

    let id = (0x420, 0x1337);
    {
        let mut keys = Default::<array::Array>::default();
        let mut data = Default::<array::Array>::default();
        starknet::Event::append_keys_and_data(@id, ref keys, ref data);
        world.emit(keys, data.span());
    };
}

//! > expected_diagnostics
