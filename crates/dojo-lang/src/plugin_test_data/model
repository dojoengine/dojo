//! > Test expansion of the derive(Model).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use serde::Serde;

#[derive(Model, Copy, Drop, Serde)]
struct Position {
    #[key]
    id: felt252,
    x: felt252,
    y: felt252
}

trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}

impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}

#[derive(Model, Serde)]
struct Roles {
    role_ids: Array<u8>
}

use starknet::ContractAddress;

#[derive(Model, Copy, Drop, Serde)]
struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,

    name: felt252, 
}

//! > generated_cairo_code
use serde::Serde;


#[derive(Model, Copy, Drop, Serde)]
struct Position {
    #[key]
    id: felt252,
    x: felt252,
    y: felt252
}

impl PositionModel of dojo::model::Model<Position> {
    #[inline(always)]
    fn name(self: @Position) -> felt252 {
        'Position'
    }

    #[inline(always)]
    fn keys(self: @Position) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.id);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn keys_layout(self: @Position) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<felt252>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn values(self: @Position) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.x);
        array::ArrayTrait::append(ref serialized, *self.y);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn layout(self: @Position) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn packed_size(self: @Position) -> usize {
        let mut layout = self.layout();
        dojo::packing::calculate_packed_size(ref layout)
    }
}


impl PositionSchemaIntrospection of dojo::database::schema::SchemaIntrospection<Position> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<felt252>::size()
            + dojo::database::schema::SchemaIntrospection::<felt252>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::database::schema::SchemaIntrospection::<felt252>::layout(ref layout);
        dojo::database::schema::SchemaIntrospection::<felt252>::layout(ref layout);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Position',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'id',
                            ty: dojo::database::schema::SchemaIntrospection::<felt252>::ty(),
                            attrs: array!['key'].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'x',
                            ty: dojo::database::schema::SchemaIntrospection::<felt252>::ty(),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'y',
                            ty: dojo::database::schema::SchemaIntrospection::<felt252>::ty(),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}


#[starknet::interface]
trait IPosition<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod position {
    use super::Position;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Position'
    }

    #[external(v0)]
    fn unpacked_size(self: @ContractState) -> usize {
        dojo::database::schema::SchemaIntrospection::<Position>::size()
    }

    #[external(v0)]
    fn packed_size(self: @ContractState) -> usize {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        let mut layout_span = layout.span();
        dojo::packing::calculate_packed_size(ref layout_span)
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> dojo::database::schema::Ty {
        dojo::database::schema::SchemaIntrospection::<Position>::ty()
    }
}



trait PositionTrait {
    fn is_zero(self: Position) -> bool;
    fn is_equal(self: Position, b: Position) -> bool;
}


impl PositionImpl of PositionTrait {
    fn is_zero(self: Position) -> bool {
        match self.x - self.y {
            0 => bool::True(()),
            _ => bool::False(()),
        }
    }

    fn is_equal(self: Position, b: Position) -> bool {
        self.x == b.x && self.y == b.y
    }
}


#[derive(Model, Serde)]
struct Roles {
    role_ids: Array<u8>
}

impl RolesModel of dojo::model::Model<Roles> {
    #[inline(always)]
    fn name(self: @Roles) -> felt252 {
        'Roles'
    }

    #[inline(always)]
    fn keys(self: @Roles) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();

        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn keys_layout(self: @Roles) -> Span<u8> {
        let mut layout = ArrayTrait::new();

        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn values(self: @Roles) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        serde::Serde::serialize(self.role_ids, ref serialized);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn layout(self: @Roles) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Roles>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn packed_size(self: @Roles) -> usize {
        let mut layout = self.layout();
        dojo::packing::calculate_packed_size(ref layout)
    }
}


impl RolesSchemaIntrospection of dojo::database::schema::SchemaIntrospection<Roles> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<Array<u8>>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::database::schema::SchemaIntrospection::<Array<u8>>::layout(ref layout);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Roles',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'role_ids',
                            ty: dojo::database::schema::SchemaIntrospection::<Array<u8>>::ty(),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}


#[starknet::interface]
trait IRoles<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod roles {
    use super::Roles;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Roles'
    }

    #[external(v0)]
    fn unpacked_size(self: @ContractState) -> usize {
        dojo::database::schema::SchemaIntrospection::<Roles>::size()
    }

    #[external(v0)]
    fn packed_size(self: @ContractState) -> usize {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Roles>::layout(ref layout);
        let mut layout_span = layout.span();
        dojo::packing::calculate_packed_size(ref layout_span)
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Roles>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> dojo::database::schema::Ty {
        dojo::database::schema::SchemaIntrospection::<Roles>::ty()
    }
}



use starknet::ContractAddress;


#[derive(Model, Copy, Drop, Serde)]
struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,

    name: felt252, 
}
impl PlayerModel of dojo::model::Model<Player> {
    #[inline(always)]
    fn name(self: @Player) -> felt252 {
        'Player'
    }

    #[inline(always)]
    fn keys(self: @Player) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.game);
        serde::Serde::serialize(self.player, ref serialized);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn keys_layout(self: @Player) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<felt252>::layout(ref layout);
        dojo::database::schema::SchemaIntrospection::<ContractAddress>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn values(self: @Player) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        array::ArrayTrait::append(ref serialized, *self.name);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn layout(self: @Player) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Player>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn packed_size(self: @Player) -> usize {
        let mut layout = self.layout();
        dojo::packing::calculate_packed_size(ref layout)
    }
}


impl PlayerSchemaIntrospection of dojo::database::schema::SchemaIntrospection<Player> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<felt252>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::database::schema::SchemaIntrospection::<felt252>::layout(ref layout);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Player',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'game',
                            ty: dojo::database::schema::SchemaIntrospection::<felt252>::ty(),
                            attrs: array!['key'].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'player',
                            ty: dojo::database::schema::SchemaIntrospection::<ContractAddress>::ty(),
                            attrs: array!['key'].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'name',
                            ty: dojo::database::schema::SchemaIntrospection::<felt252>::ty(),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}


#[starknet::interface]
trait IPlayer<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod player {
    use super::Player;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Player'
    }

    #[external(v0)]
    fn unpacked_size(self: @ContractState) -> usize {
        dojo::database::schema::SchemaIntrospection::<Player>::size()
    }

    #[external(v0)]
    fn packed_size(self: @ContractState) -> usize {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Player>::layout(ref layout);
        let mut layout_span = layout.span();
        dojo::packing::calculate_packed_size(ref layout_span)
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Player>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> dojo::database::schema::Ty {
        dojo::database::schema::SchemaIntrospection::<Player>::ty()
    }
}

//! > expected_diagnostics
error: Model must define atleast one #[key] attribute
 --> dummy_file.cairo:30:8
struct Roles {
       ^***^
