//! > Test no params

//! > test_runner_name
test_semantics

//! > setup_code
use array::ArrayTrait;
use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};

#[derive(Copy, Drop, Serde, Introspect)]
struct Health {
	#[key]
	id: u32,
	health: u16,
}

//! > function_code
let key: felt252 = 0xb0b;
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()};

//! > expression
get!()

//! > expected
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > semantic_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "get!(world, keys, (models,))"
 --> lib.cairo:12:1
get!()
^****^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:10:22
fn test_func() { let key: felt252 = 0xb0b;
                     ^*^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:11:5
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()}; {
    ^***^

//! > ==========================================================================

//! > Test wrong params

//! > test_runner_name
test_semantics

//! > setup_code
use array::ArrayTrait;
use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};

#[derive(Copy, Drop, Serde, Introspect)]
struct Health {
	#[key]
	id: u32,
	health: u16,
}

//! > function_code
let key: felt252 = 0xb0b;
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()};

//! > expression
get!(world)

//! > expected
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > semantic_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "get!(world, keys, (models,))"
 --> lib.cairo:12:1
get!(world)
^*********^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:10:22
fn test_func() { let key: felt252 = 0xb0b;
                     ^*^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:11:5
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()}; {
    ^***^

//! > ==========================================================================

//! > Test world and keys

//! > no_diagnostics
true

//! > dojo_semantic
get_success

//! > test_runner_name
test_semantics

//! > setup_code
use array::ArrayTrait;
use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};

#[derive(Copy, Drop, Serde, Introspect)]
struct Health {
	#[key]
	id: u32,
	health: u16,
}

//! > function_code
let key: felt252 = 0xb0b;
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()};

//! > expression
get!(world, key, (Health))

//! > expected
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        __get_macro_keys__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayImpl::<core::felt252>::new,
                            args: [],
                            ty: core::array::Array::<core::felt252>,
                        },
                    ),
                },
            ),
            Expr(
                StatementExpr {
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::Felt252Serde::serialize,
                            args: [
                                Value(
                                    Snapshot(
                                        ExprSnapshot {
                                            inner: Var(
                                                LocalVarId(test::key),
                                            ),
                                            ty: @core::felt252,
                                        },
                                    ),
                                ),
                                Reference(
                                    LocalVarId(test::__get_macro_keys__),
                                ),
                            ],
                            ty: (),
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __get_macro_keys__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayImpl::<core::felt252>::span,
                            args: [
                                Value(
                                    Snapshot(
                                        ExprSnapshot {
                                            inner: Var(
                                                LocalVarId(test::__get_macro_keys__),
                                            ),
                                            ty: @core::array::Array::<core::felt252>,
                                        },
                                    ),
                                ),
                            ],
                            ty: core::array::Span::<core::felt252>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health_layout__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayImpl::<core::integer::u8>::new,
                            args: [],
                            ty: core::array::Array::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Expr(
                StatementExpr {
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::HealthIntrospect::layout,
                            args: [
                                Reference(
                                    LocalVarId(test::__Health_layout__),
                                ),
                            ],
                            ty: (),
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health_layout_clone__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayTCloneImpl::<core::integer::u8, core::clone::TCopyClone::<core::integer::u8, core::integer::u8Copy>, core::integer::u8Drop>::clone,
                            args: [
                                Value(
                                    Snapshot(
                                        ExprSnapshot {
                                            inner: Var(
                                                LocalVarId(test::__Health_layout__),
                                            ),
                                            ty: @core::array::Array::<core::integer::u8>,
                                        },
                                    ),
                                ),
                            ],
                            ty: core::array::Array::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health_layout_span__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayImpl::<core::integer::u8>::span,
                            args: [
                                Value(
                                    Snapshot(
                                        ExprSnapshot {
                                            inner: Var(
                                                LocalVarId(test::__Health_layout__),
                                            ),
                                            ty: @core::array::Array::<core::integer::u8>,
                                        },
                                    ),
                                ),
                            ],
                            ty: core::array::Span::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health_layout_clone_span__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayImpl::<core::integer::u8>::span,
                            args: [
                                Value(
                                    Snapshot(
                                        ExprSnapshot {
                                            inner: Var(
                                                LocalVarId(test::__Health_layout_clone__),
                                            ),
                                            ty: @core::array::Array::<core::integer::u8>,
                                        },
                                    ),
                                ),
                            ],
                            ty: core::array::Span::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health_values__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: dojo::world::IWorldDispatcherImpl::entity,
                            args: [
                                Value(
                                    Var(
                                        LocalVarId(test::world),
                                    ),
                                ),
                                Value(
                                    Literal(
                                        ExprLiteral {
                                            value: 79600263394408,
                                            ty: core::felt252,
                                        },
                                    ),
                                ),
                                Value(
                                    Var(
                                        LocalVarId(test::__get_macro_keys__),
                                    ),
                                ),
                                Value(
                                    Var(
                                        LocalVarId(test::__Health_layout_span__),
                                    ),
                                ),
                            ],
                            ty: core::array::Span::<core::felt252>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health_model__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayImpl::<core::felt252>::new,
                            args: [],
                            ty: core::array::Array::<core::felt252>,
                        },
                    ),
                },
            ),
            Expr(
                StatementExpr {
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::serialize_array_helper::<core::felt252, core::Felt252Serde, core::felt252Drop>,
                            args: [
                                Value(
                                    Var(
                                        LocalVarId(test::__get_macro_keys__),
                                    ),
                                ),
                                Reference(
                                    LocalVarId(test::__Health_model__),
                                ),
                            ],
                            ty: (),
                        },
                    ),
                },
            ),
            Expr(
                StatementExpr {
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::serialize_array_helper::<core::felt252, core::Felt252Serde, core::felt252Drop>,
                            args: [
                                Value(
                                    Var(
                                        LocalVarId(test::__Health_values__),
                                    ),
                                ),
                                Reference(
                                    LocalVarId(test::__Health_model__),
                                ),
                            ],
                            ty: (),
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health_model_span__,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::array::ArrayImpl::<core::felt252>::span,
                            args: [
                                Value(
                                    Snapshot(
                                        ExprSnapshot {
                                            inner: Var(
                                                LocalVarId(test::__Health_model__),
                                            ),
                                            ty: @core::array::Array::<core::felt252>,
                                        },
                                    ),
                                ),
                            ],
                            ty: core::array::Span::<core::felt252>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::HealthSerde::deserialize,
                            args: [
                                Reference(
                                    LocalVarId(test::__Health_model_span__),
                                ),
                            ],
                            ty: core::option::Option::<test::Health>,
                        },
                    ),
                },
            ),
            Expr(
                StatementExpr {
                    expr: If(
                        ExprIf {
                            condition: FunctionCall(
                                ExprFunctionCall {
                                    function: core::option::OptionTraitImpl::<test::Health>::is_none,
                                    args: [
                                        Value(
                                            Snapshot(
                                                ExprSnapshot {
                                                    inner: Var(
                                                        LocalVarId(test::__Health),
                                                    ),
                                                    ty: @core::option::Option::<test::Health>,
                                                },
                                            ),
                                        ),
                                    ],
                                    ty: core::bool,
                                },
                            ),
                            if_block: Block(
                                ExprBlock {
                                    statements: [
                                        Expr(
                                            StatementExpr {
                                                expr: Block(
                                                    ExprBlock {
                                                        statements: [
                                                            Let(
                                                                StatementLet {
                                                                    pattern: Variable(
                                                                        __formatter_for_panic_macro__,
                                                                    ),
                                                                    expr: FunctionCall(
                                                                        ExprFunctionCall {
                                                                            function: core::fmt::FormatterDefault::default,
                                                                            args: [],
                                                                            ty: core::fmt::Formatter,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            Expr(
                                                                StatementExpr {
                                                                    expr: FunctionCall(
                                                                        ExprFunctionCall {
                                                                            function: core::result::ResultTraitImpl::<(), core::fmt::Error>::unwrap::<core::fmt::ErrorDrop>,
                                                                            args: [
                                                                                Value(
                                                                                    Block(
                                                                                        ExprBlock {
                                                                                            statements: [
                                                                                                Expr(
                                                                                                    StatementExpr {
                                                                                                        expr: FunctionCall(
                                                                                                            ExprFunctionCall {
                                                                                                                function: core::byte_array::ByteArrayImpl::append_word,
                                                                                                                args: [
                                                                                                                    Reference(
                                                                                                                        LocalVarId(test::__formatter_for_panic_macro__)::buffer,
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 136816024508118168988575128292127322950586093870590548369522287650670210926,
                                                                                                                                ty: core::felt252,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 31,
                                                                                                                                ty: core::integer::u32,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                                ty: (),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                Expr(
                                                                                                    StatementExpr {
                                                                                                        expr: FunctionCall(
                                                                                                            ExprFunctionCall {
                                                                                                                function: core::byte_array::ByteArrayImpl::append_word,
                                                                                                                args: [
                                                                                                                    Reference(
                                                                                                                        LocalVarId(test::__formatter_for_panic_macro__)::buffer,
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 57245710417489827494872497475953274453670361818009142277461875365354283124,
                                                                                                                                ty: core::felt252,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 31,
                                                                                                                                ty: core::integer::u32,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                                ty: (),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                Expr(
                                                                                                    StatementExpr {
                                                                                                        expr: FunctionCall(
                                                                                                            ExprFunctionCall {
                                                                                                                function: core::byte_array::ByteArrayImpl::append_word,
                                                                                                                args: [
                                                                                                                    Reference(
                                                                                                                        LocalVarId(test::__formatter_for_panic_macro__)::buffer,
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 184450045146430526813493865095770350343962517127059696327898282247556767854,
                                                                                                                                ty: core::felt252,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 31,
                                                                                                                                ty: core::integer::u32,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                                ty: (),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                Expr(
                                                                                                    StatementExpr {
                                                                                                        expr: FunctionCall(
                                                                                                            ExprFunctionCall {
                                                                                                                function: core::byte_array::ByteArrayImpl::append_word,
                                                                                                                args: [
                                                                                                                    Reference(
                                                                                                                        LocalVarId(test::__formatter_for_panic_macro__)::buffer,
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 207476049689134978464526160084214572942096890522908346890176432476061507693,
                                                                                                                                ty: core::felt252,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 31,
                                                                                                                                ty: core::integer::u32,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                                ty: (),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                Expr(
                                                                                                    StatementExpr {
                                                                                                        expr: FunctionCall(
                                                                                                            ExprFunctionCall {
                                                                                                                function: core::byte_array::ByteArrayImpl::append_word,
                                                                                                                args: [
                                                                                                                    Reference(
                                                                                                                        LocalVarId(test::__formatter_for_panic_macro__)::buffer,
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 34474207625732236007199437870,
                                                                                                                                ty: core::felt252,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                    Value(
                                                                                                                        Literal(
                                                                                                                            ExprLiteral {
                                                                                                                                value: 12,
                                                                                                                                ty: core::integer::u32,
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                                ty: (),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            tail: Some(
                                                                                                EnumVariantCtor(
                                                                                                    ExprEnumVariantCtor {
                                                                                                        variant: ConcreteVariant {
                                                                                                            concrete_enum_id: core::result::Result::<(), core::fmt::Error>,
                                                                                                            id: VariantId(core::result::Ok),
                                                                                                            ty: (),
                                                                                                            idx: 0,
                                                                                                        },
                                                                                                        value_expr: Tuple(
                                                                                                            ExprTuple {
                                                                                                                items: [],
                                                                                                                ty: (),
                                                                                                            },
                                                                                                        ),
                                                                                                        ty: core::result::Result::<(), core::fmt::Error>,
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                            ty: core::result::Result::<(), core::fmt::Error>,
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                            ty: (),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                        tail: Some(
                                                            FunctionCall(
                                                                ExprFunctionCall {
                                                                    function: core::panics::panic_with_byte_array,
                                                                    args: [
                                                                        Value(
                                                                            Snapshot(
                                                                                ExprSnapshot {
                                                                                    inner: MemberAccess(
                                                                                        ExprMemberAccess {
                                                                                            expr: Var(
                                                                                                LocalVarId(test::__formatter_for_panic_macro__),
                                                                                            ),
                                                                                            concrete_struct_id: core::fmt::Formatter,
                                                                                            member: MemberId(core::fmt::buffer),
                                                                                            ty: core::byte_array::ByteArray,
                                                                                        },
                                                                                    ),
                                                                                    ty: @core::byte_array::ByteArray,
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    ty: core::never,
                                                                },
                                                            ),
                                                        ),
                                                        ty: core::never,
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    tail: None,
                                    ty: (),
                                },
                            ),
                            else_block: None,
                            ty: (),
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        __Health,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: core::option::OptionTraitImpl::<test::Health>::unwrap,
                            args: [
                                Value(
                                    Var(
                                        LocalVarId(test::__Health),
                                    ),
                                ),
                            ],
                            ty: test::Health,
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            Var(
                LocalVarId(test::__Health),
            ),
        ),
        ty: test::Health,
    },
)

//! > semantic_diagnostics
