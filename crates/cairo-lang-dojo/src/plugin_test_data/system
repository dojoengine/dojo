//! > Test expansion of the component contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
trait Query<T> {
    fn iter() -> Map::<felt, T>;
}

#[derive(System)]
fn Move(world: felt, query: Query::<Position>) {
    return ();
}

//! > generated_cairo_code
trait Query<T> {
    fn iter() -> Map::<felt, T>;
}

#[contract]
mod MoveSystem {
    struct Storage {
        world_address: felt,
        component_ids: Array::<felt>,
    }

    #[external]
    fn initialize(world_addr: felt, component_ids: Array::<felt>) {
        let world = world_address::read();
        match world {
            Option::Some(_) => {
                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'MoveSystem: Already initialized.');
                panic(err_data);
            },
            Option::None(_) => {
                world_address::write(world_addr);
            },
        }
        
        let stored_component_ids = component_ids::read();
        match stored_component_ids {
            Option::Some(_) => {
                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'MoveSystem: Already initialized.');
                panic(err_data);
            },
            Option::None(_) => {
                let len = array_len::<felt>(component_ids);
                assert(len == 1, 'Invalid component ids length.');
                component_ids::write(component_ids);
            },
        }
    }

    #[external]
    fn execute() {
        let world = world_address::read();
        match world {
            Option::None(_) => {
                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'MoveSystem: Not initialized.');
                panic(err_data);
            },
        }
        
        return ();
    }
}

//! > expected_diagnostics
