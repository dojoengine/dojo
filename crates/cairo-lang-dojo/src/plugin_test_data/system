//! > Test expansion of the component contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
extern type Query<T>;

#[component]
mod PositionComponent {
    struct Position {
        x: felt,
        y: felt,
    }
}

#[component]
mod HealthComponent {
    struct Health {
        hp: felt,
    }
}

#[system]
mod MoveSystem {
    use PositionComponent::Position;
    use HealthComponent::Health;

    fn execute_inner(query: Query::<(Position, Option::<Health>)>) {
        return ();
    }

    fn execute(world: felt, query: Query::<(Position, Option::<Health>)>) {
        return ();
    }
}

//! > generated_cairo_code
extern type Query<T>;

#[contract]
mod PositionComponent {
    struct Position {
        x: felt,
        y: felt,
    }

    struct Storage {
        world_address: felt,
        state: Map::<felt, Position>,
    }

    // Initialize PositionComponent.
    #[external]
    fn initialize(world_addr: felt) {
        let world = world_address::read();
        assert(world == 0, 'PositionComponent: Already initialized.');
        world_address::write(world_addr);
    }

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Position) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Position {
        return state::read(entity_id);
    }
}

#[contract]
mod HealthComponent {
    struct Health {
        hp: felt, 
    }

    struct Storage {
        world_address: felt,
        state: Map::<felt, Health>,
    }

    // Initialize HealthComponent.
    #[external]
    fn initialize(world_addr: felt) {
        let world = world_address::read();
        assert(world == 0, 'HealthComponent: Already initialized.');
        world_address::write(world_addr);
    }

    // Set the state of an entity.
    #[external]
    fn set(entity_id: felt, value: Health) {
        state::write(entity_id, value);
    }

    // Get the state of an entity.
    #[view]
    fn get(entity_id: felt) -> Health {
        return state::read(entity_id);
    }
}

#[contract]
mod MoveSystem {
    use PositionComponent::Position;
    use HealthComponent::Health;

    fn execute_inner(query: Query::<(Position, Option::<Health>)>) {
        return ();
    }
    struct Storage {
        world_address: felt, 
    }

    #[external]
    fn initialize(world_addr: felt) {
        let world = world_address::read();
        assert(world == 0, 'MoveSystem: Already initialized.');
        world_address::write(world_addr);
    }

    #[external]
    fn execute() {
        let world = world_address::read();
        assert(world != 0, 'MoveSystem: Not initialized.');

        let position_ids = IWorld.lookup(
            world, 0x3718a0ff90de39b4acf137c1a27b0427c2c3f60c23c4f7c20b85c578d2c5897
        );
        let health_ids = IWorld.lookup(
            world, 0x1690bb282da6a011c52715e2188378c769966964ca2332dccad8d7542983bc2
        );

        return ();
    }
}

//! > expected_diagnostics
